public StudyGroupDTO getStudyGroupById(Integer studyGroupId){
		logit.info(" Obtain Study Group for the ID = {}", studyGroupId );
		StudyGroupDTO studyGroupDTO = null;
		PrmPgPeerGroupT studyGroupInd;
		boolean details = true;
		try {
			studyGroupInd = studyGroupsRepository.getStudyGroupById(studyGroupId);
			if (studyGroupInd == null) {
				throw new StudyGroupApiException(StudyGroupConstants.NO_DATA_FOUND_MSG);
			}
			List<PrmPgPeerGroupT> studyGroupList = new ArrayList<>();
			studyGroupList.add(studyGroupInd);
			List<StudyGroupDTO> studyGroupDataList = populateStudyGroupList(studyGroupList, details);
			studyGroupDTO = studyGroupDataList.get(0);
			logit.info(" Study Group Bean populated with data for ID = {}", studyGroupId );
		} catch (Exception e) {
			throw new StudyGroupApiException(StudyGroupConstants.EXCEPTION_MESSAGE, e );
		} 
        return studyGroupDTO;
	}
	
	@Query(" FROM PrmPgPeerGroupT pg WHERE pg.cgId = :cgId") 
	PrmPgPeerGroupT getStudyGroupById(@Param("cgId") Integer cgId);
	
	package com.optum.fads.pgp.datarules.domain;

import com.optum.fads.authorization.api.domain.UiUserBase;
import lombok.Data;

import java.io.Serializable;
import java.time.LocalDateTime;
import java.util.List;

import com.optum.fads.authorization.api.domain.UiUserBase;

import jakarta.persistence.*;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.OneToMany;
import jakarta.persistence.Table;
import org.hibernate.annotations.Formula;


/**
 * The persistent class for the PRM_PG_PEER_GROUP_T database table.
 *
 */
@Entity
@Table(name="PRM_PG_PEER_GROUP_T")
@Data
public class PrmPgPeerGroupT implements Serializable {
	private static final long serialVersionUID = 1L;

	@Id
	@Column(name="CG_ID")
	private Integer cgId;

	@Column(name="CG_LEVEL")
	private String cgLevel;

	@Column(name="CG_NAME")
	private String studyGroupName;

	@Column(name="CG_TYPE")
	private String cgType;


	@Formula("(SELECT lu.LU_LABEL FROM FADS_LU_VALUES_T lu WHERE lu.LU_VALUE = CG_TYPE AND lu.FIELD_ID = 'CG_TYPE' AND lu.LU_VIEW = '1')")
	private String cgTypeDescr;

	public List<PrmDrDataRuleT> getPrmDrDataRuleTs() {
		return prmDrDataRuleTs;
	}

	public void setPrmDrDataRuleTs(List<PrmDrDataRuleT> prmDrDataRuleTs) {
		this.prmDrDataRuleTs = prmDrDataRuleTs;
	}

	@ManyToMany
	@JoinTable(name = "PRM_PG_DR_T", joinColumns = {
			@JoinColumn(name = "CG_ID", nullable = false) }, inverseJoinColumns = {
			@JoinColumn(name = "DR_ID", nullable = false) })
	private List<PrmDrDataRuleT> prmDrDataRuleTs;

	//bi-directional many-to-one association to UiUserBase
	@ManyToOne
	@JoinColumn(name="CREATE_USR")
	private UiUserBase uiUserBaseCr;

	@Column(name="CREATE_DTE")
	private LocalDateTime createDate;

	//bi-directional many-to-one association to UiUserBase
	@ManyToOne
	@JoinColumn(name="UPDATE_USR")
	private UiUserBase uiUserBaseUpd;

	@Column(name="UPDATE_DTE")
	private LocalDateTime updateDate;
	/*
	@Temporal(TemporalType.TIMESTAMP)
	@Column(name="UPDATE_DTE",nullable = false,columnDefinition="default CURRENT_TIMESTAMP")
	private Date updateDate;

	@Temporal( value = TemporalType.TIMESTAMP )
    @ColumnDefault( value = "CURRENT_TIMESTAMP" )
	@Column(name="UPDATE_DTE",nullable = false)
    private LocalDateTime updateDate;
*/
	//bi-directional many-to-one association to PrmPgDrT
	@OneToMany(mappedBy="prmPgPeerGroupT")
	private List<PrmPgDrT> prmPgDrTs;

	//bi-directional many-to-one association to PrmPgForcedPartT
	@OneToMany(mappedBy="prmPgPeerGroupT")
	private List<PrmPgForcedPartT> prmPgForcedPartTs;

	public Integer getCgId() {
		return this.cgId;
	}

	public void setCgId(Integer cgId) {
		this.cgId = cgId;
	}

	public String getCgLevel() {
		return this.cgLevel;
	}

	public void setCgLevel(String cgLevel) {
		this.cgLevel = cgLevel;
	}

	public String getStudyGroupName() {
		return studyGroupName;
	}

	public void setStudyGroupName(String studyGroupName) {
		this.studyGroupName = studyGroupName;
	}

        public String getCgType() {
            return this.cgType;
        }

        public void setCgType(String cgType) {
            this.cgType = cgType;
        }

	public LocalDateTime getCreateDate() {
		return createDate;
	}

	public void setCreateDate(LocalDateTime createDate) {
		this.createDate = createDate;
	}

	public LocalDateTime getUpdateDate() {
		return updateDate;
	}

	public void setUpdateDate(LocalDateTime updateDate) {
		this.updateDate = updateDate;
	}
	/*
	@PreUpdate
	  protected void onUpdate() {
		this.updateDate = new Date();
	  }
	  */
	public List<PrmPgDrT> getPrmPgDrTs() {
		return this.prmPgDrTs;
	}

	public void setPrmPgDrTs(List<PrmPgDrT> prmPgDrTs) {
		this.prmPgDrTs = prmPgDrTs;
	}

	public PrmPgDrT addPrmPgDrT(PrmPgDrT prmPgDrT) {
		getPrmPgDrTs().add(prmPgDrT);
		prmPgDrT.setPrmPgPeerGroupT(this);

		return prmPgDrT;
	}

	public PrmPgDrT removePrmPgDrT(PrmPgDrT prmPgDrT) {
		getPrmPgDrTs().remove(prmPgDrT);
		prmPgDrT.setPrmPgPeerGroupT(null);

		return prmPgDrT;
	}

	public List<PrmPgForcedPartT> getPrmPgForcedPartTs() {
		return this.prmPgForcedPartTs;
	}

	public void setPrmPgForcedPartTs(List<PrmPgForcedPartT> prmPgForcedPartTs) {
		this.prmPgForcedPartTs = prmPgForcedPartTs;
	}

	public PrmPgForcedPartT addPrmPgForcedPartT(PrmPgForcedPartT prmPgForcedPartT) {
		getPrmPgForcedPartTs().add(prmPgForcedPartT);
		prmPgForcedPartT.setPrmPgPeerGroupT(this);

		return prmPgForcedPartT;
	}

	public PrmPgForcedPartT removePrmPgForcedPartT(PrmPgForcedPartT prmPgForcedPartT) {
		getPrmPgForcedPartTs().remove(prmPgForcedPartT);
		prmPgForcedPartT.setPrmPgPeerGroupT(null);

		return prmPgForcedPartT;
	}

	public UiUserBase getUiUserBaseUpd() {
		return this.uiUserBaseUpd;
	}

	public void setUiUserBaseUpd(UiUserBase uiUserBaseUpd) {
		this.uiUserBaseUpd = uiUserBaseUpd;
	}

	public UiUserBase getUiUserBaseCr() {
		return this.uiUserBaseCr;
	}

	public void setUiUserBaseCr(UiUserBase uiUserBaseCr) {
		this.uiUserBaseCr = uiUserBaseCr;
	}

}



@GetMapping(value = "/getpeergroupdetails/{peerGroupId}")
	 public ResponseEntity getPeerGroupById(@PathVariable(name = "peerGroupId") Integer peerGroupId)
		 
	{   
		StudyGroupDTO sgBean = null;
		 try {
			 sgBean = iStudyGroupDataService.getStudyGroupById(peerGroupId);
		 } catch (StudyGroupApiException ex) {
			 logit.error("While retrieving Peer Group details: {}", ex.getMessage());
	         return ResponseEntity
	         		.status(HttpStatus.BAD_REQUEST)
	           		.body("Error while retrieving peer group details");
	     }		
		return ResponseEntity
		            .status(HttpStatus.OK)                 
		            .body(sgBean);
	 }
	 
	 
	 
	 ITS RETURNING BELOW RESPONSE WHWRE PARTICIAPNTS DETAILS SHUFFLED IT SHOULD BE IN BELOW ORDER AS PER REQUEST 
	 RESPONSE 
	 
	 {
    "studyGroupId": 426,
    "studyGroupName": "TestPG09782",
    "type": "2",
    "level": "1",
    "fileName": "",
    "typeDesc": "Provider ID",
    "participants": [
        "100000016",
        "100000017",
        "100000018",
        "100000019",
        "100000020",
        "100000021",
        "100000022",
        "100000023",
        "100000024",
        "100000025",
        "100000026",
        "100000027",
        "100000028",
        "100000029",
        "100000030",
        "100000031",
        "100000032",
        "100000033",
        "100000034",
        "100000035",
        "100000036",
        "100000037",
        "100000038",
        "100000039",
        "100000040",
        "100000041",
        "100000042",
        "100000043",
        "100000044",
        "100000045",
        "100000046",
        "100000047",
        "100000048",
        "100000049",
        "100000050",
        "100000051",
        "100000052",
        "100000053",
        "100000054",
        "100000055",
        "100000056",
        "100000057",
        "100000058",
        "100000059",
        "100000060",
        "100000061",
        "100000062",
        "100000063",
        "100000064",
        "100000065",
        "100000066",
        "100000067",
        "100000068",
        "100000069",
        "100000070",
        "100000071",
        "100000072",
        "100000073",
        "100000075",
        "100000074",
        "100000001",
        "100000002",
        "100000003",
        "100000004",
        "100000005",
        "100000006",
        "100000007",
        "100000008",
        "100000009",
        "100000010",
        "100000011",
        "100000012",
        "100000013",
        "100000014",
        "100000015"
    ],
    "dataRules": [
        {
            "dataRuleId": 706,
            "dataRuleName": "All Chiropractic Manipulationsqy",
            "dataElementId": 115,
            "dataElementName": "Line Proc Code",
            "dataElementDataType": "char",
            "rangeValue": "hasvalue",
            "selectedValues": [],
            "rangeValues": [
                {
                    "from": "98940",
                    "to": "98943"
                }
            ],
            "operator": " Inclusive",
            "createdBy": "Damian Quattlebaum",
            "createdDate": "02/20/2012 12:00 AM",
            "modifiedBy": "Sourabh Gupta",
            "modifiedDate": "09/18/2025 11:56 AM"
        },
        {
            "dataRuleId": 1035,
            "dataRuleName": "AT Thera Class Narcotics H3A, H3B",
            "dataElementId": 300,
            "dataElementName": "Rx Thera Class Code-Spec",
            "dataElementDataType": "char",
            "rangeValue": "novalue",
            "selectedValues": [
                {
                    "code": "H3A",
                    "value": "Analgesics, Narcotics"
                },
                {
                    "code": "H3B",
                    "value": "Analgesics, Narcotics (cont)"
                }
            ],
            "rangeValues": [],
            "operator": " Inclusive",
            "createdBy": "Legacy SUR",
            "createdDate": "09/25/2019 12:00 AM",
            "modifiedBy": "Legacy SUR",
            "modifiedDate": "09/25/2019 12:00 AM"
        }
    ],
    "createdBy": "Sourabh Gupta",
    "createdDate": "09/23/2025 01:17 PM",
    "modifiedBy": "Sourabh Gupta",
    "modifiedDate": "09/23/2025 01:17 PM",
    "createdBySystemId": "SG6234283",
    "modifiedBySystemId": "SG6234283"
}

REQUEST




{
  "studyGroupId": null,
  "studyGroupName": "TestPG09782",
  "type": "2",
  "level": "1",
  "fileName": "",
  "typeDesc": "",
  "participants": [
    "100000075",
    "100000074",
    "100000001",
    "100000002",
    "100000003",
    "100000004",
    "100000005",
    "100000006",
    "100000007",
    "100000008",
    "100000009",
    "100000010",
    "100000011",
    "100000012",
    "100000013",
    "100000014",
    "100000015",
    "100000016",
    "100000017",
    "100000018",
    "100000019",
    "100000020",
    "100000021",
    "100000022",
    "100000023",
    "100000024",
    "100000025",
    "100000026",
    "100000027",
    "100000028",
    "100000029",
    "100000030",
    "100000031",
    "100000032",
    "100000033",
    "100000034",
    "100000035",
    "100000036",
    "100000037",
    "100000038",
    "100000039",
    "100000040",
    "100000041",
    "100000042",
    "100000043",
    "100000044",
    "100000045",
    "100000046",
    "100000047",
    "100000048",
    "100000049",
    "100000050",
    "100000051",
    "100000052",
    "100000053",
    "100000054",
    "100000055",
    "100000056",
    "100000057",
    "100000058",
    "100000059",
    "100000060",
    "100000061",
    "100000062",
    "100000063",
    "100000064",
    "100000065",
    "100000066",
    "100000067",
    "100000068",
    "100000069",
    "100000070",
    "100000071",
    "100000072",
    "100000073"
  ],
  "dataRules": [
    {
      "dataRuleId": 706,
      "dataRuleName": "All Chiropractic Manipulationsqy"
    },
    {
      "dataRuleId": 1035,
      "dataRuleName": "AT Thera Class Narcotics H3A, H3B"
    }
  ],
  "createdBy": "",
  "createdDate": "",
  "modifiedBy": "",
  "modifiedDate": "",
  "createdBySystemId": "",
  "modifiedBySystemId": ""
}
