/**
 * 
 */
package com.optum.fads.pgp.study.dto;

import java.time.LocalDateTime;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.datatype.jsr310.deser.LocalDateTimeDeserializer;
import com.fasterxml.jackson.datatype.jsr310.ser.LocalDateTimeSerializer;

import lombok.Builder;
import lombok.Data;
import lombok.Getter;
import lombok.Setter;

/**
 * @author sbiry
 *
 */
@Getter
@Setter
@Data
@Builder
public class Study {

	private Integer studyId;
	private String studyName;
	private String user;
	private String createdUser;
	private String createdBySystemId;
	private String updatedUser;
	private String updatedBySystemId;

	@JsonFormat(pattern = "MM/dd/yyyy hh:mm a")
	@JsonSerialize(using = LocalDateTimeSerializer.class)
	@JsonDeserialize(using = LocalDateTimeDeserializer.class)
	private LocalDateTime createDate;

	@JsonFormat(pattern = "MM/dd/yyyy hh:mm a")
	@JsonSerialize(using = LocalDateTimeSerializer.class)
	@JsonDeserialize(using = LocalDateTimeDeserializer.class)
	private LocalDateTime updateDate;

	@JsonFormat(pattern = "MM/dd/yyyy hh:mm a")
	@JsonSerialize(using = LocalDateTimeSerializer.class)
	@JsonDeserialize(using = LocalDateTimeDeserializer.class)
	private LocalDateTime lastRunDate;

/*	@JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss a")
	@JsonSerialize(using = LocalDateTimeSerializer.class)
	@JsonDeserialize(using = LocalDateTimeDeserializer.class)*/
	private LocalDateTime scheduleRunDateTime;
	
	private long submitFlag;

}




@Override
	@Transactional
	public void scheduleStudyJob(Study study) {
		//startPGPEngine();
		LocalDateTime today = LocalDateTime.now();
		LocalDateTime purgeDate = null;
		Integer jobId = jobsRepository.getNextJobId();
		Optional<FadsConfigT> optional = fadsConfigRepository.findById(StudyConstants.PURGE_OPTION_CODE);
		if (optional.isPresent()) {
			FadsConfigT fadsConfig = optional.get();
			purgeDate = today.plusDays(Long.parseLong(fadsConfig.getOptionValue()));

		}
		logit.info("Schedule Study ID {} - Job at {}", study.getStudyId(), study.getScheduleRunDateTime());
		JobMasterT jobMaster = JobMasterT.builder().jobId(jobId).datePurge(purgeDate).createDte(today)
				.createUiUserBase(UiUserBase.builder().uiSystemId(study.getCreatedBySystemId()).build())
				.updateUiUserBase(UiUserBase.builder().uiSystemId(study.getUpdatedBySystemId()).build())
				.prmStudyMasterT(PrmStudyMasterT.builder().pbId(study.getStudyId()).build())				
				.dateSched(study.getScheduleRunDateTime()).arcFlag(BigDecimal.valueOf(0))
				.holdFlag(BigDecimal.valueOf(0))
				.purgeFlag(BigDecimal.valueOf(0))
				.jobLuStatusT(JobLuStatusT.builder().statusCd(Long.valueOf(1)).build()).build();
		jobMaster = jobsRepository.save(jobMaster);

	}
	
	
	
	logit.info("Schedule Study ID {} - Job at {}", study.getStudyId(), study.getScheduleRunDateTime());
	
	
	
[ERROR] /C:/Users/sgupt664/Project_workspace/FADS05/fads-monolithic-application/fads-pgp-study-api/src/main/java/com/optum/fads/pgp/study/service/impl/StudyService.java:[320,89] cannot find symbol
[ERROR]   symbol:   method getScheduleRunDateTime()
[ERROR]   location: variable study of type com.optum.fads.pgp.study.dto.Study
