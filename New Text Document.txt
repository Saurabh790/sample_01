@Override
@Transactional(readOnly = true)
public StudyDTO getStudy(Long id) {

    Optional<PrmStudyMasterT> optional = studyOwnRepository.findById(id);

    if (optional.isPresent()) {
        PrmStudyMasterT prmStudyMasterT = optional.get();
        StudyDTO studyDTO = studyDetailMapper.toStudyDTO(prmStudyMasterT);

        // Map StudyRsRiItems
        List<StudyRsRiItem> studyRsRiItems = studyDetailMapper
                .toStudyRsRiItems(prmStudyMasterT.getPrmStudyRsRiTs());

        studyRsRiItems.forEach(studyRsRiItem -> {
            studyDTO.getReportSections().forEach(rs -> {
                if (Objects.equals(rs.getReportSectionId(), studyRsRiItem.getReportSectionId())) {
                    rs.getReportItems().forEach(ri -> {
                        if (Objects.equals(ri.getReportItemId(), studyRsRiItem.getReportItemId())) {
                            rs.setRsOrder(studyRsRiItem.getRsOrder());
                            ri.setLowerLimit(studyRsRiItem.getLowerLimit());
                            ri.setUpperLimit(studyRsRiItem.getUpperLimit());
                            ri.setPercentage(studyRsRiItem.getPercentage());
                            ri.setStandardDeviation(studyRsRiItem.getStandardDeviation());
                            ri.setWeight(studyRsRiItem.getWeight());
                        }
                    });
                }
            });
        });

        // Map StudyRsRiExceptions
        List<StudyRsRiException> studyRsRiExceptions = studyDetailMapper
                .toStudyRsRiExceptions(prmStudyMasterT.getPrmStudyRsRiExceptTs());

        studyRsRiExceptions.forEach(srx -> {
            studyDTO.getReportSections().forEach(rs -> {
                if (Objects.equals(rs.getReportSectionId(), srx.getReportSectionId())) {
                    rs.getReportItems().forEach(ri -> {
                        if (Objects.equals(ri.getReportItemId(), srx.getReportItemId())) {
                            studyDTO.getTimePeriods().forEach(timePeriod -> {
                                if (Objects.equals(timePeriod.getTimePeriodId(), srx.getTimePeriodId())) {
                                    ri.getExceptionProcesses().add(new ExceptionProcess(
                                            srx.getTimePeriodId(),
                                            srx.getExceptionFlag(),
                                            srx.getOverLimitFlag()));
                                }
                            });
                        }
                    });
                }
            });
        });

        // âœ… Safe sorting with null handling
        List<ReportSection> rsSortedList = studyDTO.getReportSections().stream()
                .sorted(Comparator.comparing(
                        ReportSection::getRsOrder,
                        Comparator.nullsLast(Comparator.naturalOrder())
                ))
                .collect(Collectors.toList());

        // Use a LinkedHashSet to preserve order
        studyDTO.setReportSections(new LinkedHashSet<>(rsSortedList));

        return studyDTO;
    }

    return null;
}
