/*
//***********************************************
// Copyright UNITEDHEALTH GROUP CORPORATION 2018.
// This software and documentation contain confidential and
// proprietary information owned by UnitedHealth Group Corporation.
// Unauthorized use and distribution are prohibited.
//***********************************************
*/

package com.optum.fads.pgp.reportsection.api.controller;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Component;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import com.optum.fads.pgp.reportsection.api.common.ListTableParams;
import com.optum.fads.pgp.reportsection.api.common.constants.ReportSectionConstants;
import com.optum.fads.pgp.reportsection.api.dto.AccessLevel;
import com.optum.fads.pgp.reportsection.api.dto.AppUser;
import com.optum.fads.pgp.reportsection.api.dto.BehaviorPatternDTO;
import com.optum.fads.pgp.reportsection.api.dto.PaginationResultRI;
import com.optum.fads.pgp.reportsection.api.dto.ReportItemDTO;
import com.optum.fads.pgp.reportsection.api.exception.ReportSectionApiException;
import com.optum.fads.pgp.reportsection.api.service.IReportItemDataService;

/**
 * Use this class to add the methods so that a single web service can be used to
 * get and update the FADS Report Section data 
 *
 ** @author Anil Wagh
 */

@RestController
//@RequestMapping("/reportgroup")
public class ReportItemController {
	
	private static final Logger logit = LoggerFactory
			.getLogger(ReportItemController.class);
	@Autowired
	private IReportItemDataService iReportItemDataService;
	
	  final String[] DISALLOWED_FIELDS = new String[]{"listTableParams.selectedItemIds"};
	     
	    @InitBinder(value = "listTableParams")
	    void initListTableParamsValidator(WebDataBinder binder) {
	        binder.setDisallowedFields(DISALLOWED_FIELDS);
	    }
	    
	
	/**
	* this method will give the Report Item data records per page by filter/sort criteria
	 * 
	 * @param - ListTableParams (contains sort, filter conditions; page number, page size)
	 */
	@GetMapping(value = "/getreportitems/",headers="Accept=application/json")
	public ResponseEntity getReportItems(ListTableParams listTableParams) {
		PaginationResultRI paginationResult;
		try {
			paginationResult = iReportItemDataService.getReportItemsList(listTableParams);	
		} catch (ReportSectionApiException ex) {
			logit.error(ReportSectionConstants.EXCEPTION_MESSAGE, ex.getMessage());
			return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(ReportSectionConstants.EXCEPTION_MESSAGE);
		}		
		return ResponseEntity
		        .status(HttpStatus.OK)                 
		        .body(paginationResult);
   }
	 /**
	  * this method will get the report item record corresponding to input Report Item ID  
	 * @param - Report Item ID 
	 */
	@GetMapping(value = "/getreportitemdetails/{reportItemId}")
	 public ResponseEntity getReportItemById(@PathVariable(name = "reportItemId") Integer reportItemId)
		 
	{   
		ReportItemDTO reportItemDTO = null;
		 try {	
			 reportItemDTO = iReportItemDataService.getReportItemById(reportItemId);
		 } catch (ReportSectionApiException ex) {
			 logit.error(ReportSectionConstants.EXCEPTION_MESSAGE, ex.getMessage());
				return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(ReportSectionConstants.EXCEPTION_MESSAGE);
	     }		
		return ResponseEntity
		            .status(HttpStatus.OK)                 
		            .body(reportItemDTO);
	 }
	 /**
	 * this method will delete the Report Item record corresponding to input Report Item ID  
	 * @param - Report Item ID 
	 */
	@DeleteMapping(value = "/deletereportitem/{reportitemid}")
	public ResponseEntity deleteReportItemById(@PathVariable(name = "reportitemid") Integer reportItemId)
 
	{   
		List<String> deleteReportItemMessages;
		 try {
			 deleteReportItemMessages = iReportItemDataService.deleteReportItem(reportItemId);
		 } catch (ReportSectionApiException ex) {
			 logit.error(ReportSectionConstants.EXCEPTION_MESSAGE, ex.getMessage());
				return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(ReportSectionConstants.EXCEPTION_MESSAGE);
	     }		
		return ResponseEntity
		       .status(HttpStatus.OK)                 
		       .body(deleteReportItemMessages);
	 }
	/**
	* this method will add a Report Item 
	 * 
	 * @param - reportItemDTO
	 */
	@PostMapping(value = {"/newreportitem"})
	public ResponseEntity newReportItem(@RequestBody ReportItemDTO reportItemDTO) {
		ReportItemDTO retReportItemDTO = null;
		String userAccess = "";
		boolean userHasAccess = false;
		try {
			DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(ReportSectionConstants.DATE_FORMAT_MMDDYYYY_HHMMSS_A,
				Locale.ENGLISH);
			Authentication auth =  SecurityContextHolder.getContext().getAuthentication();
			if (auth != null) {
				AppUser user = (AppUser) auth.getPrincipal();
				reportItemDTO.setCreatedBySystemId(user.getUserSystemId());
				reportItemDTO.setModifiedBySystemId(user.getUserSystemId());
				List<AccessLevel> userAccessLevels = user.getRole().getAllowedAccesses();
				for (AccessLevel userAccessLevel : userAccessLevels) {
					if (userAccessLevel.getModuleCode().equals("STUDY")) {
						userAccess = userAccessLevel.getAccess();
						break;
					}
				}
				if (userAccess.equals("A") || userAccess.equals("B")) {
					userHasAccess = true;
				}
			}
			if (userHasAccess) {
				LocalDateTime currentLocalDate = LocalDateTime.now(iReportItemDataService.getZoneId());
				// Save the create and update date as per local time zone in the DTO
				reportItemDTO.setCreatedDate(dateTimeFormatter.format(currentLocalDate));
				reportItemDTO.setModifiedDate(dateTimeFormatter.format(currentLocalDate));
				retReportItemDTO = iReportItemDataService.addReportItem(reportItemDTO);
				return ResponseEntity
				        .status(HttpStatus.CREATED)                 
				        .body(retReportItemDTO);
			} else {
				return new ResponseEntity<String>(ReportSectionConstants.NOT_AUTHORIZED, HttpStatus.FORBIDDEN);
			}
		} catch (ReportSectionApiException ex) {
			logit.error(ReportSectionConstants.EXCEPTION_MESSAGE, ex.getMessage());
			return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(ReportSectionConstants.EXCEPTION_MESSAGE);
		}		
		
   }
	/**
	* this method will update a report section 
	 * 
	 * @param - reportItemDTO
	 */
	@PutMapping(value = {"/updatereportitem/{reportItemId}"})
	public ResponseEntity<String> updateReportItem(@PathVariable Integer reportItemId, @RequestBody ReportItemDTO reportItemDTO) {
		String updReportItemMessage;
		String userAccess = "";
		boolean userHasAccess = false;
		try {
			DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(ReportSectionConstants.DATE_FORMAT_MMDDYYYY_HHMMSS_A,
				Locale.ENGLISH);
			Authentication auth =  SecurityContextHolder.getContext().getAuthentication();
			if (auth != null) {
				AppUser user = (AppUser) auth.getPrincipal();
				reportItemDTO.setModifiedBySystemId(user.getUserSystemId());
				List<AccessLevel> userAccessLevels = user.getRole().getAllowedAccesses();
				for (AccessLevel userAccessLevel : userAccessLevels) {
					if (userAccessLevel.getModuleCode().equals("STUDY")) {
						userAccess = userAccessLevel.getAccess();
						break;
					}
				}
				if (userAccess.equals("A") || 
						(userAccess.equals("B") && reportItemDTO.getCreatedBySystemId().equals(user.getUserSystemId()))) {
					userHasAccess = true;
				}
			}
			
			if (userHasAccess) {
					LocalDateTime currentLocalDate = LocalDateTime.now(iReportItemDataService.getZoneId());
					// Save the update date as per local time zone in the DTO
					reportItemDTO.setModifiedDate(dateTimeFormatter.format(currentLocalDate));
					updReportItemMessage = iReportItemDataService.updateReportItem(reportItemId, reportItemDTO);
					return ResponseEntity
					        .status(HttpStatus.OK)                 
					        .body(updReportItemMessage);
			} else {
				return new ResponseEntity<String>(ReportSectionConstants.NOT_AUTHORIZED, HttpStatus.FORBIDDEN);
			}
		} catch (com.optum.fads.pgp.reportsection.api.exception.ReportSectionApiException ex) {
			logit.error(ReportSectionConstants.EXCEPTION_MESSAGE, ex.getMessage());
			return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(ReportSectionConstants.EXCEPTION_MESSAGE);
		}		
		
   }
	/**
	* this method will get the available behavior pattern records  
	 * 
	 * @param - Report Item ID
	 */
	@GetMapping(value = {"/getavailablebehaviorpatterns/{reportItemId}"})
	public ResponseEntity getAvailableBehaviors(@PathVariable Integer reportItemId) {
		List<BehaviorPatternDTO> availableBehaviorPatternsList;
		try {
			availableBehaviorPatternsList = iReportItemDataService.getAvailableBehaviorPatterns(reportItemId);
		} catch (ReportSectionApiException ex) {
			logit.error(ReportSectionConstants.EXCEPTION_MESSAGE, ex.getMessage());
			return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(ReportSectionConstants.EXCEPTION_MESSAGE);
		}		
		return ResponseEntity
		        .status(HttpStatus.OK)                 
		        .body(availableBehaviorPatternsList);
   }
	/**
	* this method will get the selected behavior pattern records
	 * 
	 * @param - Report Item ID
	 */
	@GetMapping(value = {"/getselectedbehaviorpatterns/{reportItemId}"})
	public ResponseEntity getSelectedBehaviors(@PathVariable Integer reportItemId) {
		List<BehaviorPatternDTO> selectedBehaviorPatternsList;
		 try {
			 selectedBehaviorPatternsList = iReportItemDataService.getSelectedBehaviorPatterns(reportItemId);
		 } catch (ReportSectionApiException ex) {
			 logit.error(ReportSectionConstants.EXCEPTION_MESSAGE, ex.getMessage());
				return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(ReportSectionConstants.EXCEPTION_MESSAGE);
	     }		
		return ResponseEntity
		            .status(HttpStatus.OK)                 
		            .body(selectedBehaviorPatternsList);
   }
	/**
	 * this method will give all the Report Item data or records per page for My Items request
	 * 
	 * @param - ListTableParams (contains sort, filter conditions; page number, page
	 *          size)
	 */
	@GetMapping(value = { "/getmyreportitems/" }, headers = "Accept=application/json")
	public ResponseEntity getMyReportItems(ListTableParams listTableParams) {
		PaginationResultRI paginationResult;
		try {
			Authentication auth =  SecurityContextHolder.getContext().getAuthentication();
			if (auth != null) {
				AppUser user = (AppUser) auth.getPrincipal();
				if (listTableParams.getSearchBy() == null) {
					listTableParams.setSearchBy(new ArrayList <String>());
					listTableParams.setSearchInput(new ArrayList <String>());
				}
				listTableParams.getSearchBy().add(ReportSectionConstants.USER_SYSTEM_ID);
				listTableParams.getSearchInput().add(user.getUserSystemId());
			}
			paginationResult = iReportItemDataService.getReportItemsList(listTableParams);
		} catch (ReportSectionApiException ex) {
			logit.error(ReportSectionConstants.EXCEPTION_MESSAGE, ex.getMessage());
			return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(ReportSectionConstants.EXCEPTION_MESSAGE);
		}
		return ResponseEntity.status(HttpStatus.OK).body(paginationResult);
	}
}
