package com.o2.pri.de.idvs.revalidation.regicheck;

import com.o2.pri.de.idvs.entity.IdvClientConfig;
import com.o2.pri.de.idvs.entity.IdvHistoricConfig;
import com.o2.pri.de.idvs.entity.IdvMethod;
import com.o2.pri.de.idvs.entity.IdvTransaction;
import com.o2.pri.de.idvs.model.IdVerificationMethodType;
import com.o2.pri.de.idvs.repository.*;
import com.o2.pri.de.idvs.service.impl.GeneralConfigurationService;
import com.o2.pri.de.idvs.tolerant.Scores;
import com.o2.pri.de.idvs.tolerant.TolerantResponse;
import com.o2.pri.de.idvs.tolerant.TolerantRestClient;
import com.o2.pri.de.idvs.tolerant.TolerantResult;
import com.tef.openapi.idv.notify.tmf630.model.NotificationEvent;

import lombok.SneakyThrows;

import org.apache.kafka.clients.producer.KafkaProducer;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.*;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.web.client.RestTemplate;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.when;

import java.net.URI;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;
@ActiveProfiles("test")
@ExtendWith(MockitoExtension.class)
class TolerantScoreDeciderTest {

    @Spy
    @InjectMocks
    TolerantRestClient tolerantRestClient;

    @Mock
    IdvClientConfigRepository idvClientConfigDao;

    @Mock
    IdvHistoricConfigRepository historicConfigDao;

    @Mock
    IdvConfigRepository idvConfigRepo;

    @Mock
    private IdvRulesRepository rulesDao;

    @Mock
    private IdvRulesConditionsRepository rulesConditionsDao;

    @Mock
    private IdvBlackListRepository blackListDao;

    @Mock
    BlacklistEvaluator blacklistEvaluator;

    @Spy
    @InjectMocks
    GeneralConfigurationService configurationService;

    @Mock
    RestTemplate restTemplate;

    @InjectMocks
    TolerantScoreDecider decider;
    
    @MockBean
	KafkaProducer<String, NotificationEvent> producer;

    @BeforeEach
    public void setup() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    @SneakyThrows
    void testTolerantDecide(){
        IdvTransaction transaction = new IdvTransaction();
        transaction.setId(1L);
        transaction.setRegistrationBirthday(Calendar.getInstance().getTime());
        transaction.setBirthday(Calendar.getInstance().getTime());
        transaction.setEqualityScoreOverall(15);
        IdvMethod method = new IdvMethod();
        method.setNoRecheck(false);
        transaction.setMethod(method);
        IdvClientConfig clientConfig = new IdvClientConfig();
        clientConfig.setUrl("http://localhost:8081");
        ResponseEntity<TolerantResponse> httpResponse = Mockito.mock(ResponseEntity.class);
        TolerantResponse tolerantResponse = new TolerantResponse();
        tolerantResponse.setReturnCode("0");
        when(httpResponse.getBody()).thenReturn(tolerantResponse);
        when(idvConfigRepo.getConfiguration(ArgumentMatchers.anyString())).thenReturn("value");
        when(idvClientConfigDao.getConfiguration(ArgumentMatchers.anyString())).thenReturn(clientConfig);
        when(restTemplate.exchange(ArgumentMatchers.any(URI.class),ArgumentMatchers.any(HttpMethod.class),
                        ArgumentMatchers.any(HttpEntity.class),ArgumentMatchers.any(Class.class)))
                .thenReturn(httpResponse);
        //when(blacklistEvaluator.checkIfBlacklisted(Mockito.anyLong())).thenReturn(true);
        IdvHistoricConfig config=new IdvHistoricConfig();
        config.setRegistrationDataCheckLowerLimit(25);
        List<IdvHistoricConfig> IdvHistoricConfig=new ArrayList<>();
        IdvHistoricConfig.add(config);
		Page<IdvHistoricConfig> historicConfigPage = new PageImpl<>(IdvHistoricConfig);
        when(historicConfigDao.findAll(ArgumentMatchers.any(Pageable.class))).thenReturn(historicConfigPage);
        assertThat(decider.decide(transaction)).isNotNull();
    }
    
    @SneakyThrows
    public void testTolerantDecide2(){
        IdvTransaction transaction = new IdvTransaction();
        transaction.setId(1L);
        transaction.setRegistrationBirthday(Calendar.getInstance().getTime());
        transaction.setBirthday(Calendar.getInstance().getTime());
        transaction.setEqualityScoreOverall(15);
        IdvMethod method = new IdvMethod();
        method.setNoRecheck(false);
        transaction.setMethod(method);
        IdvClientConfig clientConfig = new IdvClientConfig();
        clientConfig.setUrl("http://localhost:8081");
        ResponseEntity<TolerantResponse> httpResponse = Mockito.mock(ResponseEntity.class);
        TolerantResponse tolerantResponse = new TolerantResponse();
        tolerantResponse.setReturnCode("0");
        List<TolerantResult> results =new ArrayList<>() ;
        TolerantResult result=new TolerantResult();
        result.setOverAllScore(15);
        Scores score=new Scores();
		result.setScores(score);
		results.add(result);
		tolerantResponse.setResults(results);
        when(httpResponse.getBody()).thenReturn(tolerantResponse);
        when(idvConfigRepo.getConfiguration(ArgumentMatchers.anyString())).thenReturn("value");
        when(idvClientConfigDao.getConfiguration(ArgumentMatchers.anyString())).thenReturn(clientConfig);
        when(restTemplate.exchange(ArgumentMatchers.any(URI.class),ArgumentMatchers.any(HttpMethod.class),
                        ArgumentMatchers.any(HttpEntity.class),ArgumentMatchers.any(Class.class)))
                .thenReturn(httpResponse);
        when(blacklistEvaluator.checkIfBlacklisted(Mockito.anyLong())).thenReturn(true);

        IdvHistoricConfig config=new IdvHistoricConfig();
        config.setRegistrationDataCheckLowerLimit(5);
        config.setRegistrationDataCheckUpperLimit(25);
        List<IdvHistoricConfig> IdvHistoricConfig=new ArrayList<>();
        IdvHistoricConfig.add(config);
		Page<IdvHistoricConfig> historicConfigPage = new PageImpl<>(IdvHistoricConfig);
        when(historicConfigDao.findAll(ArgumentMatchers.any(Pageable.class))).thenReturn(historicConfigPage);
        assertThat(decider.decide(transaction)).isNotNull();
    }
    
    @Test
    @SneakyThrows
    void testTolerantDecide1(){
        IdvTransaction transaction = new IdvTransaction();
        transaction.setId(1L);
        transaction.setRegistrationBirthday(Calendar.getInstance().getTime());
        transaction.setBirthday(Calendar.getInstance().getTime());
        IdvMethod method = new IdvMethod();
        method.setNoRecheck(true);
        method.setMethodType(IdVerificationMethodType.EXT_EID_CAN_IDENT.value());
        transaction.setMethod(method);
        transaction.setEqualityScoreOverall(15);
        IdvClientConfig clientConfig = new IdvClientConfig();
        clientConfig.setUrl("http://localhost:8081");
        ResponseEntity<TolerantResponse> httpResponse = Mockito.mock(ResponseEntity.class);
        TolerantResponse tolerantResponse = new TolerantResponse();
        tolerantResponse.setReturnCode("0");
        List<TolerantResult> results =new ArrayList<>() ;
        TolerantResult result=new TolerantResult();
        result.setOverAllScore(15);
        Scores score=new Scores();
		result.setScores(score);
		results.add(result);
		tolerantResponse.setResults(results);
        when(httpResponse.getBody()).thenReturn(tolerantResponse);
        when(idvConfigRepo.getConfiguration(ArgumentMatchers.anyString())).thenReturn("value");
        when(idvClientConfigDao.getConfiguration(ArgumentMatchers.anyString())).thenReturn(clientConfig);
        when(restTemplate.exchange(ArgumentMatchers.any(URI.class),ArgumentMatchers.any(HttpMethod.class),
                        ArgumentMatchers.any(HttpEntity.class),ArgumentMatchers.any(Class.class)))
                .thenReturn(httpResponse);
        IdvHistoricConfig config=new IdvHistoricConfig();
        config.setRegistrationDataCheckLowerLimit(5);
        config.setRegistrationDataCheckUpperLimit(25);
        config.setRegistrationDataViPiThreshold(22);
        List<IdvHistoricConfig> IdvHistoricConfig=new ArrayList<>();
        IdvHistoricConfig.add(config);
		Page<IdvHistoricConfig> historicConfigPage = new PageImpl<>(IdvHistoricConfig);
        when(historicConfigDao.findAll(ArgumentMatchers.any(Pageable.class))).thenReturn(historicConfigPage);
        assertThat(decider.decide(transaction)).isNotNull();
    }
    
    @Test
    @SneakyThrows
    void testTolerantDecide11(){
        IdvTransaction transaction = new IdvTransaction();
        transaction.setId(1L);
        transaction.setRegistrationBirthday(Calendar.getInstance().getTime());
        transaction.setBirthday(Calendar.getInstance().getTime());
        IdvMethod method = new IdvMethod();
        method.setNoRecheck(true);
        method.setMethodType(IdVerificationMethodType.EXT_EID_CAN_IDENT.value());
        transaction.setMethod(method);
        transaction.setEqualityScoreOverall(100);
        IdvClientConfig clientConfig = new IdvClientConfig();
        clientConfig.setUrl("http://localhost:8081");
        ResponseEntity<TolerantResponse> httpResponse = Mockito.mock(ResponseEntity.class);
        TolerantResponse tolerantResponse = new TolerantResponse();
        tolerantResponse.setReturnCode("0");
        List<TolerantResult> results =new ArrayList<>() ;
        TolerantResult result=new TolerantResult();
        result.setOverAllScore(100);
        Scores score=new Scores();
		result.setScores(score);
		results.add(result);
		tolerantResponse.setResults(results);
        when(httpResponse.getBody()).thenReturn(tolerantResponse);
        when(idvConfigRepo.getConfiguration(ArgumentMatchers.anyString())).thenReturn("value");
        when(idvClientConfigDao.getConfiguration(ArgumentMatchers.anyString())).thenReturn(clientConfig);
        when(restTemplate.exchange(ArgumentMatchers.any(URI.class),ArgumentMatchers.any(HttpMethod.class),
                        ArgumentMatchers.any(HttpEntity.class),ArgumentMatchers.any(Class.class)))
                .thenReturn(httpResponse);
        IdvHistoricConfig config=new IdvHistoricConfig();
        config.setRegistrationDataCheckLowerLimit(5);
        config.setRegistrationDataCheckUpperLimit(25);
        config.setRegistrationDataViPiThreshold(22);
        List<IdvHistoricConfig> IdvHistoricConfig=new ArrayList<>();
        IdvHistoricConfig.add(config);
		Page<IdvHistoricConfig> historicConfigPage = new PageImpl<>(IdvHistoricConfig);
        when(historicConfigDao.findAll(ArgumentMatchers.any(Pageable.class))).thenReturn(historicConfigPage);
        assertThat(decider.decide(transaction)).isNotNull();
    }
    
    @Test
    @SneakyThrows
    void testTolerantDecide12(){
        IdvTransaction transaction = new IdvTransaction();
        transaction.setId(1L);
        transaction.setRegistrationBirthday(Calendar.getInstance().getTime());
        transaction.setBirthday(Calendar.getInstance().getTime());
        IdvMethod method = new IdvMethod();
        method.setNoRecheck(true);
        method.setMethodType(IdVerificationMethodType.POST_IDENT.value());
        transaction.setMethod(method);
        transaction.setEqualityScoreOverall(15);
        IdvClientConfig clientConfig = new IdvClientConfig();
        clientConfig.setUrl("http://localhost:8081");
        ResponseEntity<TolerantResponse> httpResponse = Mockito.mock(ResponseEntity.class);
        TolerantResponse tolerantResponse = new TolerantResponse();
        tolerantResponse.setReturnCode("0");
        List<TolerantResult> results =new ArrayList<>() ;
        TolerantResult result=new TolerantResult();
        result.setOverAllScore(15);
        Scores score=new Scores();
		result.setScores(score);
		results.add(result);
		tolerantResponse.setResults(results);
        when(httpResponse.getBody()).thenReturn(tolerantResponse);
        when(idvConfigRepo.getConfiguration(ArgumentMatchers.anyString())).thenReturn("value");
        when(idvClientConfigDao.getConfiguration(ArgumentMatchers.anyString())).thenReturn(clientConfig);
        when(restTemplate.exchange(ArgumentMatchers.any(URI.class),ArgumentMatchers.any(HttpMethod.class),
                        ArgumentMatchers.any(HttpEntity.class),ArgumentMatchers.any(Class.class)))
                .thenReturn(httpResponse);
        IdvHistoricConfig config=new IdvHistoricConfig();
        config.setRegistrationDataCheckLowerLimit(5);
        config.setRegistrationDataCheckUpperLimit(25);
        config.setRegistrationDataViPiThreshold(22);
        List<IdvHistoricConfig> IdvHistoricConfig=new ArrayList<>();
        IdvHistoricConfig.add(config);
		Page<IdvHistoricConfig> historicConfigPage = new PageImpl<>(IdvHistoricConfig);
        when(historicConfigDao.findAll(ArgumentMatchers.any(Pageable.class))).thenReturn(historicConfigPage);
        assertThat(decider.decide(transaction)).isNotNull();
    }
    
    @Test
    @SneakyThrows
    void testTolerantDecide132(){
        IdvTransaction transaction = new IdvTransaction();
        transaction.setId(1L);
        transaction.setRegistrationBirthday(Calendar.getInstance().getTime());
        transaction.setBirthday(Calendar.getInstance().getTime());
        IdvMethod method = new IdvMethod();
        method.setNoRecheck(true);
        method.setMethodType(IdVerificationMethodType.POST_IDENT.value());
        transaction.setMethod(method);
        transaction.setEqualityScoreOverall(23);
        IdvClientConfig clientConfig = new IdvClientConfig();
        clientConfig.setUrl("http://localhost:8081");
        ResponseEntity<TolerantResponse> httpResponse = Mockito.mock(ResponseEntity.class);
        TolerantResponse tolerantResponse = new TolerantResponse();
        tolerantResponse.setReturnCode("0");
        List<TolerantResult> results =new ArrayList<>() ;
        TolerantResult result=new TolerantResult();
        result.setOverAllScore(23);
        Scores score=new Scores();
		result.setScores(score);
		results.add(result);
		tolerantResponse.setResults(results);
        when(httpResponse.getBody()).thenReturn(tolerantResponse);
        when(idvConfigRepo.getConfiguration(ArgumentMatchers.anyString())).thenReturn("value");
        when(idvClientConfigDao.getConfiguration(ArgumentMatchers.anyString())).thenReturn(clientConfig);
        when(restTemplate.exchange(ArgumentMatchers.any(URI.class),ArgumentMatchers.any(HttpMethod.class),
                        ArgumentMatchers.any(HttpEntity.class),ArgumentMatchers.any(Class.class)))
                .thenReturn(httpResponse);
        IdvHistoricConfig config=new IdvHistoricConfig();
        config.setRegistrationDataCheckLowerLimit(5);
        config.setRegistrationDataCheckUpperLimit(25);
        config.setRegistrationDataViPiThreshold(22);
        List<IdvHistoricConfig> IdvHistoricConfig=new ArrayList<>();
        IdvHistoricConfig.add(config);
		Page<IdvHistoricConfig> historicConfigPage = new PageImpl<>(IdvHistoricConfig);
        when(historicConfigDao.findAll(ArgumentMatchers.any(Pageable.class))).thenReturn(historicConfigPage);
        assertThat(decider.decide(transaction)).isNotNull();
    }
    
    @Test
    @SneakyThrows
    void testTolerantDecide122(){
        IdvTransaction transaction = new IdvTransaction();
        transaction.setId(1L);
        transaction.setRegistrationBirthday(Calendar.getInstance().getTime());
        transaction.setBirthday(Calendar.getInstance().getTime());
        IdvMethod method = new IdvMethod();
        method.setNoRecheck(true);
        method.setMethodType(IdVerificationMethodType.POST_IDENT.value());
        transaction.setMethod(method);
        transaction.setEqualityScoreOverall(28);
        IdvClientConfig clientConfig = new IdvClientConfig();
        clientConfig.setUrl("http://localhost:8081");
        ResponseEntity<TolerantResponse> httpResponse = Mockito.mock(ResponseEntity.class);
        TolerantResponse tolerantResponse = new TolerantResponse();
        tolerantResponse.setReturnCode("0");
        List<TolerantResult> results =new ArrayList<>() ;
        TolerantResult result=new TolerantResult();
        Scores score=new Scores();
		result.setScores(score);
        result.setOverAllScore(28);
		results.add(result);
		tolerantResponse.setResults(results);
        when(httpResponse.getBody()).thenReturn(tolerantResponse);
        when(idvConfigRepo.getConfiguration(ArgumentMatchers.anyString())).thenReturn("value");
        when(idvClientConfigDao.getConfiguration(ArgumentMatchers.anyString())).thenReturn(clientConfig);
        when(restTemplate.exchange(ArgumentMatchers.any(URI.class),ArgumentMatchers.any(HttpMethod.class),
                        ArgumentMatchers.any(HttpEntity.class),ArgumentMatchers.any(Class.class)))
                .thenReturn(httpResponse);
        IdvHistoricConfig config=new IdvHistoricConfig();
        config.setRegistrationDataCheckLowerLimit(5);
        config.setRegistrationDataCheckUpperLimit(25);
        config.setRegistrationDataViPiThreshold(22);
        List<IdvHistoricConfig> IdvHistoricConfig=new ArrayList<>();
        IdvHistoricConfig.add(config);
		Page<IdvHistoricConfig> historicConfigPage = new PageImpl<>(IdvHistoricConfig);
        when(historicConfigDao.findAll(ArgumentMatchers.any(Pageable.class))).thenReturn(historicConfigPage);
        assertThat(decider.decide(transaction)).isNotNull();
    }
}
TolerantScoreDeciderTest.testTolerantDecide:118 » NullPointer Cannot invoke "S...
[ERROR]   TolerantScoreDeciderTest.testTolerantDecide1:199 » NullPointer Cannot invoke "...
[ERROR]   TolerantScoreDeciderTest.testTolerantDecide11:240 » NullPointer Cannot invoke ...
[ERROR]   TolerantScoreDeciderTest.testTolerantDecide12:281 » NullPointer Cannot invoke ...
[ERROR]   TolerantScoreDeciderTest.testTolerantDecide122:363 » NullPointer Cannot invoke...
[ERROR]   TolerantScoreDeciderTest.testTolerantDecide132:322 » NullPointer Cannot invoke...
