@PutMapping(value = { "/updatereportsection/{reportSectionId}" })
public ResponseEntity<String> updateReportSection(@PathVariable Integer reportSectionId,
                                                  @RequestBody ReportSectionDTO reportSectionDTO) {
    String updReportSectionMessage;
    String userAccess = "";
    boolean userHasAccess = false;

    try {
        DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(
                ReportSectionConstants.DATE_FORMAT_MMDDYYYY_HHMMSS_A, Locale.ENGLISH);
        Authentication auth = SecurityContextHolder.getContext().getAuthentication();

        if (auth != null) {
            AppUser user = (AppUser) auth.getPrincipal();
            reportSectionDTO.setModifiedBySystemId(user.getUserSystemId());

            List<com.optum.fads.authorization.api.dto.AccessLevel> userAccessLevels = user.getRole().getAllowedAccesses();
            for (com.optum.fads.authorization.api.dto.AccessLevel userAccessLevel : userAccessLevels) {
                if ("STUDY".equals(userAccessLevel.getModuleCode())) {
                    userAccess = userAccessLevel.getAccess();
                    break;
                }
            }

            if ("A".equals(userAccess) || 
               ("B".equals(userAccess) && reportSectionDTO.getCreatedBySystemId().equals(user.getUserSystemId()))) {
                userHasAccess = true;
            }
        }

        if (userHasAccess) {
            LocalDateTime currentLocalDate = LocalDateTime.now(iReportSectionDataService.getZoneId());
            reportSectionDTO.setModifiedDate(dateTimeFormatter.format(currentLocalDate));
            updReportSectionMessage = iReportSectionDataService.updateReportSection(reportSectionId, reportSectionDTO);
            return ResponseEntity.status(HttpStatus.OK).body(updReportSectionMessage);
        } else {
            return new ResponseEntity<>(ReportSectionConstants.NOT_AUTHORIZED, HttpStatus.FORBIDDEN);
        }

    } catch (ReportSectionApiException ex) {
        logit.error(ReportSectionConstants.EXCEPTION_MESSAGE, ex); // ✅ log full stack trace
        return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(ReportSectionConstants.EXCEPTION_MESSAGE);

    } catch (Exception ex) {
        logit.error("Unexpected exception occurred while updating report section", ex); // ✅ catch-all fallback
        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Unexpected error occurred");
    }
}
