@Override
@Transactional
public void scheduleStudyJob(Study study) {
    LocalDateTime today = LocalDateTime.now();
    Date purgeDate = null;

    // jobId type safety: entity has long, nextJobId() returns Integer
    long jobId = Long.valueOf(jobsRepository.getNextJobId());

    Optional<FadsConfigT> optional = fadsConfigRepository.findById(StudyConstants.PURGE_OPTION_CODE);
    if (optional.isPresent()) {
        FadsConfigT fadsConfig = optional.get();
        purgeDate = Date.from(
            today.plusDays(Long.parseLong(fadsConfig.getOptionValue()))
                 .atZone(ZoneId.systemDefault())
                 .toInstant()
        );
    }

    logit.info("Schedule Study ID {} - Job at {}", study.getStudyId(), study.getScheduleRunDateTime());

    JobMasterT jobMaster = new JobMasterT();
    jobMaster.setJobId(jobId);
    jobMaster.setDatePurge(purgeDate);
    jobMaster.setCreateDte(Date.from(today.atZone(ZoneId.systemDefault()).toInstant()));
    jobMaster.setArcFlag(0);
    jobMaster.setHoldFlag(0);
    jobMaster.setPurgeFlag(0);

    // âœ… Use managed references instead of 'new'
    UiUserBase creatorRef = uiUserBaseRepository.getReferenceById(study.getCreatedBySystemId());
    UiUserBase updaterRef = uiUserBaseRepository.getReferenceById(study.getUpdatedBySystemId());
    PrmStudyMasterT studyRef = studyOwnRepository.getReferenceById(study.getStudyId());
    JobLuStatusT statusRef = jobLuStatusRepository.getReferenceById(1L); // put your real default status id

    jobMaster.setCreateUiUserBase(creatorRef);
    jobMaster.setUpdateUiUserBase(updaterRef);
    jobMaster.setPrmStudyMasterT(studyRef);
    jobMaster.setJobLuStatusT(statusRef);

    if (study.getScheduleRunDateTime() != null) {
        jobMaster.setDateSched(Date.from(
            study.getScheduleRunDateTime().atZone(ZoneId.systemDefault()).toInstant()
        ));
    }

    jobsRepository.save(jobMaster);
}
