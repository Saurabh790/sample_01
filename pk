package com.optum.fads.userroles.api.config.dao.impl;

import static org.hibernate.criterion.Example.create; // issue at this line

import java.util.List;

import org.hibernate.LockOptions;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.query.Query;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationContext;
import org.springframework.stereotype.Repository;

import com.optum.fads.userroles.api.config.dao.LuValuesDAO;
import com.optum.fads.userroles.api.config.domain.LuValues;

/**
 * A data access object (DAO) providing persistence and search support for
 * LuValues entities. Transaction control of the save(), update() and delete()
 * operations can directly support Spring container-managed transactions or they
 * can be augmented to handle user-managed Spring transactions. Each of these
 * methods provides additional information for how to configure it for the
 * desired type of transaction control.
 * 
 * @see com.optum.fads.config.domain.LuValues
 * @author MyEclipse Persistence Tools
 */
@Repository
public class LuValuesDAOImpl implements LuValuesDAO {
	private static final Logger log = LoggerFactory
			.getLogger(LuValuesDAOImpl.class);
	// property constants
	public static final String LU_CODE = "luCode";
	public static final String LU_LABEL = "luLabel";
	public static final String LU_VIEW = "luView";
	public static final String OBJ_ID = "objId";
	public static final String LU_SEQ = "luSeq";
	public static final String LU_PARENT = "luParent";
	@Autowired
	private SessionFactory sessionFactory;

	public void setSessionFactory(SessionFactory sessionFactory) {
		this.sessionFactory = sessionFactory;
	}

	private Session getCurrentSession() {
		return sessionFactory.getCurrentSession();
	}

	protected void initDao() {
		// do nothing
	}

	public void save(LuValues transientInstance) {
		log.debug("saving LuValues instance");
		try {
			getCurrentSession().save(transientInstance);
			log.debug("save successful");
		} catch (RuntimeException re) {
			log.error("save failed", re);
			throw re;
		}
	}

	public void delete(LuValues persistentInstance) {
		log.debug("deleting LuValues instance");
		try {
			getCurrentSession().delete(persistentInstance);
			log.debug("delete successful");
		} catch (RuntimeException re) {
			log.error("delete failed", re);
			throw re;
		}
	}

	public LuValues findById(com.optum.fads.config.domain.LuValuesId id) { // issue at this line
		log.debug("getting LuValues instance with id: " + id);
		try {
			LuValues instance = (LuValues) getCurrentSession().get(
					"com.optum.fads.config.domain.LuValues", id);
			return instance;
		} catch (RuntimeException re) {
			log.error("get failed", re);
			throw re;
		}
	}

	public List<LuValues> findByExample(LuValues instance) {
		log.debug("finding LuValues instance by example");
		try {
			List<LuValues> results = (List<LuValues>) getCurrentSession()
					.createCriteria("com.optum.fads.config.domain.LuValues")
					.add(create(instance)).list();
			log.debug("find by example successful, result size: "
					+ results.size());
			return results;
		} catch (RuntimeException re) {
			log.error("find by example failed", re);
			throw re;
		}
	}

	public List findByProperty(String propertyName, Object value) {
		log.debug("finding LuValues instance with property: " + propertyName
				+ ", value: " + value);
		try {
			/*String queryString = "from LuValues as model where model."
					+ propertyName + "= ?";*/
			
			StringBuilder queryStr = new StringBuilder();
			queryStr.append("from LuValues as model where model.");
			queryStr.append(propertyName);
			queryStr.append("=?");
			
			Query queryObject = getCurrentSession().createQuery(queryStr.toString());
			queryObject.setParameter(0, value);
			return queryObject.list();
		} catch (RuntimeException re) {
			log.error("find by property name failed", re);
			throw re;
		}
	}

	public List<LuValues> findByLuCode(Object luCode) {
		return findByProperty(LU_CODE, luCode);
	}

	public List<LuValues> findByLuLabel(Object luLabel) {
		return findByProperty(LU_LABEL, luLabel);
	}

	public List<LuValues> findByLuView(Object luView) {
		return findByProperty(LU_VIEW, luView);
	}

	public List<LuValues> findByObjId(Object objId) {
		return findByProperty(OBJ_ID, objId);
	}

	public List<LuValues> findByLuSeq(Object luSeq) {
		return findByProperty(LU_SEQ, luSeq);
	}

	public List<LuValues> findByLuParent(Object luParent) {
		return findByProperty(LU_PARENT, luParent);
	}

	public List findAll() {
		log.debug("finding all LuValues instances");
		try {
			String queryString = "from LuValues";
			Query queryObject = getCurrentSession().createQuery(queryString);
			return queryObject.list();
		} catch (RuntimeException re) {
			log.error("find all failed", re);
			throw re;
		}
	}

	public LuValues merge(LuValues detachedInstance) {
		log.debug("merging LuValues instance");
		try {
			LuValues result = (LuValues) getCurrentSession().merge(
					detachedInstance);
			log.debug("merge successful");
			return result;
		} catch (RuntimeException re) {
			log.error("merge failed", re);
			throw re;
		}
	}

	public void attachDirty(LuValues instance) {
		log.debug("attaching dirty LuValues instance");
		try {
			getCurrentSession().saveOrUpdate(instance);
			log.debug("attach successful");
		} catch (RuntimeException re) {
			log.error("attach failed", re);
			throw re;
		}
	}

	public void attachClean(LuValues instance) {
		log.debug("attaching clean LuValues instance");
		try {
			getCurrentSession().buildLockRequest(LockOptions.NONE).lock(
					instance);
			log.debug("attach successful");
		} catch (RuntimeException re) {
			log.error("attach failed", re);
			throw re;
		}
	}
	
	/* (non-Javadoc)
	 * @see com.optum.fads.config.dao.impl.LuValuesDAO#findByFieldIdAndOrderBySeq(java.lang.String)
	 */
	@Override
	public List<LuValues> findByFieldIdAndOrderBySeq(String fieldId) {
		log.debug("finding LuValues instance by example");
		try {
			String queryString = "from LuValues as model where model.id.fieldId"
					+  "= ?" +
					" and model.luView='1' order by model.luSeq asc ";
			Query queryObject = getCurrentSession().createQuery(queryString);
			queryObject.setParameter(0, fieldId);
			return queryObject.list();
		} catch (RuntimeException re) {
			log.error("find by example failed", re);
			throw re;
		}
	}

	public static LuValuesDAO getFromApplicationContext(ApplicationContext ctx) {
		return (LuValuesDAO) ctx.getBean("LuValuesDAO");
	}
}




LuValaues it is showing error at every line and here we have below is our LuValues
package com.optum.fads.userroles.api.config.domain;

import jakarta.persistence.Entity;
import jakarta.persistence.Table;

/**
 * LuValues entity. @author MyEclipse Persistence Tools
 */
@Entity
@Table(name = "LU_VALUES")
public class LuValues extends AbstractLuValues implements java.io.Serializable {

	// Constructors

	/** default constructor */
	public LuValues() {
	}

	/** minimal constructor */
	public LuValues(LuValuesId id, Integer objId) {
		super(id, objId);
	}

	/** full constructor */
	public LuValues(LuValuesId id, String luCode, String luLabel,
			String luView, Integer objId, Integer luSeq, String luParent) {
		super(id, luCode, luLabel, luView, objId, luSeq, luParent);
	}

}
