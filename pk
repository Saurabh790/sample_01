@Test
public void testFormatLocalDate_withUtilDate() throws Exception {
    ReportItemDataService spyService = Mockito.spy(reportItemDataService);

    // Given a specific util.Date
    Calendar cal = Calendar.getInstance();
    cal.set(2025, Calendar.JANUARY, 15, 14, 30, 0);
    Date utilDate = cal.getTime();

    // When
    String formatted = spyService.formatLocalDate(utilDate);

    // Then
    assertNotNull(formatted);
    assertTrue(formatted.contains("01/15/2025"));
    assertTrue(formatted.contains("PM"));
}

@Test
public void testFormatLocalDate_withSqlDate() throws Exception {
    ReportItemDataService spyService = Mockito.spy(reportItemDataService);

    java.sql.Date sqlDate = java.sql.Date.valueOf(LocalDate.of(2025, 1, 15));

    String formatted = spyService.formatLocalDate(sqlDate);

    assertNotNull(formatted);
    assertTrue(formatted.contains("01/15/2025"));
    // SQL date is at midnight so hour will be 12:00 AM
    assertTrue(formatted.contains("AM"));
}

@Test
public void testFormatLocalDate_withNull_returnsNull() throws Exception {
    ReportItemDataService spyService = Mockito.spy(reportItemDataService);

    assertNull(spyService.formatLocalDate(null));
}

@Test
public void testFormatLocalDate_withInvalidDate_throwsException() {
    ReportItemDataService spyService = Mockito.spy(reportItemDataService);

    // Create a Date mock that throws on toInstant()
    Date badDate = Mockito.mock(Date.class);
    Mockito.when(badDate.toInstant()).thenThrow(new RuntimeException("Boom"));

    Exception ex = assertThrows(Exception.class, () -> spyService.formatLocalDate(badDate));
    assertTrue(ex.getMessage().contains("Error formatting date"));
}
