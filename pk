@Test
void testUpdateReportItem_AccessA_ShouldReturnOk() {
    ReportItemDTO reportItemDTO = new ReportItemDTO();
    reportItemDTO.setCreatedBySystemId("USER123");

    AppUser mockUser = new AppUser();
    mockUser.setUserSystemId("USER123");

    AccessLevel accessLevel = new AccessLevel(null, "STUDY", null, "A");
    Role role = new Role();
    role.getAllowedAccesses().add(accessLevel);
    mockUser.setRole(role);

    Authentication authentication = mock(Authentication.class);
    when(authentication.getPrincipal()).thenReturn(mockUser);
    SecurityContext securityContext = mock(SecurityContext.class);
    when(securityContext.getAuthentication()).thenReturn(authentication);
    SecurityContextHolder.setContext(securityContext);

    when(iReportItemDataService.getZoneId()).thenReturn(ZoneId.of("UTC"));
    when(iReportItemDataService.updateReportItem(anyInt(), any(ReportItemDTO.class)))
        .thenReturn("Updated Successfully");

    ResponseEntity<String> response = controller.updateReportItem(1, reportItemDTO);

    assertEquals(HttpStatus.OK, response.getStatusCode());
    assertEquals("Updated Successfully", response.getBody());
}


@Test
void testUpdateReportItem_AccessB_SameUserId_ShouldReturnOk() {
    ReportItemDTO reportItemDTO = new ReportItemDTO();
    reportItemDTO.setCreatedBySystemId("USER123");

    AppUser mockUser = new AppUser();
    mockUser.setUserSystemId("USER123");

    AccessLevel accessLevel = new AccessLevel(null, "STUDY", null, "B");
    Role role = new Role();
    role.getAllowedAccesses().add(accessLevel);
    mockUser.setRole(role);

    Authentication authentication = mock(Authentication.class);
    when(authentication.getPrincipal()).thenReturn(mockUser);
    SecurityContext securityContext = mock(SecurityContext.class);
    when(securityContext.getAuthentication()).thenReturn(authentication);
    SecurityContextHolder.setContext(securityContext);

    when(iReportItemDataService.getZoneId()).thenReturn(ZoneId.of("UTC"));
    when(iReportItemDataService.updateReportItem(anyInt(), any(ReportItemDTO.class)))
        .thenReturn("Updated Successfully");

    ResponseEntity<String> response = controller.updateReportItem(2, reportItemDTO);

    assertEquals(HttpStatus.OK, response.getStatusCode());
    assertEquals("Updated Successfully", response.getBody());
}


@Test
void testUpdateReportItem_AccessB_DifferentUserId_ShouldReturnForbidden() {
    ReportItemDTO reportItemDTO = new ReportItemDTO();
    reportItemDTO.setCreatedBySystemId("OTHER_USER");

    AppUser mockUser = new AppUser();
    mockUser.setUserSystemId("USER123");

    AccessLevel accessLevel = new AccessLevel(null, "STUDY", null, "B");
    Role role = new Role();
    role.getAllowedAccesses().add(accessLevel);
    mockUser.setRole(role);

    Authentication authentication = mock(Authentication.class);
    when(authentication.getPrincipal()).thenReturn(mockUser);
    SecurityContext securityContext = mock(SecurityContext.class);
    when(securityContext.getAuthentication()).thenReturn(authentication);
    SecurityContextHolder.setContext(securityContext);

    ResponseEntity<String> response = controller.updateReportItem(3, reportItemDTO);

    assertEquals(HttpStatus.FORBIDDEN, response.getStatusCode());
    assertEquals(ReportSectionConstants.NOT_AUTHORIZED, response.getBody());
}


@Test
void testUpdateReportItem_ExceptionThrown_ShouldReturnBadRequest() {
    ReportItemDTO reportItemDTO = new ReportItemDTO();
    reportItemDTO.setCreatedBySystemId("USER123");

    AppUser mockUser = new AppUser();
    mockUser.setUserSystemId("USER123");

    AccessLevel accessLevel = new AccessLevel(null, "STUDY", null, "A");
    Role role = new Role();
    role.getAllowedAccesses().add(accessLevel);
    mockUser.setRole(role);

    Authentication authentication = mock(Authentication.class);
    when(authentication.getPrincipal()).thenReturn(mockUser);
    SecurityContext securityContext = mock(SecurityContext.class);
    when(securityContext.getAuthentication()).thenReturn(authentication);
    SecurityContextHolder.setContext(securityContext);

    when(iReportItemDataService.getZoneId()).thenReturn(ZoneId.of("UTC"));
    when(iReportItemDataService.updateReportItem(anyInt(), any(ReportItemDTO.class)))
        .thenThrow(new ReportSectionApiException("Some error"));

    ResponseEntity<String> response = controller.updateReportItem(4, reportItemDTO);

    assertEquals(HttpStatus.BAD_REQUEST, response.getStatusCode());
    assertEquals(ReportSectionConstants.EXCEPTION_MESSAGE, response.getBody());
}
