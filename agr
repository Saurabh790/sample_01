@GetMapping(value = { "/findAllByPageable/" }, headers = "Accept=application/json")
public Page<Study> findAllByPageable(
        @RequestParam(name = "pageNumber", required = true, defaultValue = "1") @Min(1) Integer pageNumber,
        @RequestParam(name = "recordsPerPage", required = true, defaultValue = "10") @Min(10) Integer recordsPerPage,
        @RequestParam(name = "sortBy", required = false, defaultValue = "studyName") StudyEnum sortBy,
        @RequestParam(name = "sortOrder", required = false, defaultValue = "desc") Integer sortOrder,
        @RequestParam(name = "searchBy", required = false) List<String> searchBy,
        @RequestParam(name = "searchInput", required = false) List<String> searchInput
) {
    // normalize page index (0-based)
    int pageIdx = (pageNumber != null && pageNumber > 0) ? pageNumber - 1 : 0;

    // map enum to actual sort field
    String sortValue = StudySortEnum.valueOf(sortBy.name()).value;

    // keep your numeric sortOrder semantics: assume 1=asc, anything else=desc
    // (works with existing clients sending sortOrder=1 or sortOrder=0/other)
    Sort sort = (sortOrder != null && sortOrder == 1)
            ? Sort.by(Sort.Order.asc(sortValue).ignoreCase())
            : Sort.by(Sort.Order.desc(sortValue).ignoreCase());

    Pageable pageable = PageRequest.of(pageIdx, recordsPerPage, sort);

    // Build search map only if both sides have values
    Map<String, String> map = null;
    if (searchBy != null && !searchBy.isEmpty() && searchInput != null && !searchInput.isEmpty()) {
        // pair by index; if counts differ, use the smaller size to avoid IndexOutOfBounds
        int size = Math.min(searchBy.size(), searchInput.size());
        map = IntStream.range(0, size)
                .boxed()
                .collect(Collectors.toMap(
                        searchBy::get,
                        searchInput::get,
                        (a, b) -> b,                 // last wins on duplicate keys
                        LinkedHashMap::new));        // keep incoming order (optional)
    }

    return studyService.findAllStudies(map, pageable);
}
