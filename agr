private static String safeSummarize(ListTableParams p) {
    if (p == null) return "null";
    int inputsSize = (p.getSearchInput() == null) ? 0 : p.getSearchInput().size();
    return String.format(
        "pageNumber=%s, recordsPerPage=%s, sortBy=%s, sortOrder=%s, searchBy=%s, searchInput(size=%d)",
        p.getPageNumber(), p.getRecordsPerPage(), p.getSortBy(), p.getSortOrder(),
        p.getSearchBy(), inputsSize
    );
}


private Pageable createPageable(ListTableParams p) {
    int page = (p.getPageNumber() == null || p.getPageNumber() < 0) ? 0 : p.getPageNumber();
    int size = (p.getRecordsPerPage() == null || p.getRecordsPerPage() <= 0) ? 25 : p.getRecordsPerPage();

    Sort sort = Sort.unsorted();
    if (p.getSortBy() != null && !p.getSortBy().isBlank()) {
        // convention: sortOrder > 0 => ASC, else DESC
        boolean asc = p.getSortOrder() == null || p.getSortOrder() > 0;
        sort = asc ? Sort.by(p.getSortBy()).ascending() : Sort.by(p.getSortBy()).descending();
    }
    return PageRequest.of(page, size, sort);
}
