
/*
//***********************************************
// Copyright UNITEDHEALTH GROUP CORPORATION 2018.
// This software and documentation contain confidential and
// proprietary information owned by UnitedHealth Group Corporation.
// Unauthorized use and distribution are prohibited.
//***********************************************
*/

package com.optum.fads.pgp.reportsection.api.controller;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Component;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.optum.fads.pgp.reportsection.api.common.ListTableParams;
import com.optum.fads.pgp.reportsection.api.common.constants.ReportSectionConstants;
import com.optum.fads.pgp.reportsection.api.dto.AccessLevel;
import com.optum.fads.pgp.reportsection.api.dto.AppUser;
import com.optum.fads.pgp.reportsection.api.dto.PaginationResultRS;
import com.optum.fads.pgp.reportsection.api.dto.ReportItemDTO;
import com.optum.fads.pgp.reportsection.api.dto.ReportSectionDTO;
import com.optum.fads.pgp.reportsection.api.exception.ReportSectionApiException;
import com.optum.fads.pgp.reportsection.api.service.IReportSectionDataService;

/**
 * Use this class to add the methods so that a single web service can be used to
 * get and update the FADS Report Section data
 *
 ** @author Anil Wagh
 */
@Component
@RestController
@RequestMapping("/reportgroup")
@CrossOrigin
public class ReportSectionController {

	private static final Logger logit = LoggerFactory
			.getLogger(ReportSectionController.class);
	@Autowired
	private IReportSectionDataService iReportSectionDataService;
	
	  final String[] DISALLOWED_FIELDS = new String[]{"listTableParams.selectedItemIds"};
	    
	    @InitBinder(value = "listTableParams")
	    void initListTableParamsValidator(WebDataBinder binder) {
	        binder.setDisallowedFields(DISALLOWED_FIELDS);
	    }
	   

	/**
	 * this method will give all the Report Section data or records per page
	 * 
	 * @param - ListTableParams (contains sort, filter conditions; page number, page
	 *          size)
	 */
	@GetMapping(value = { "/getreportsections/" }, headers = "Accept=application/json")
	public ResponseEntity getReportSections(ListTableParams listTableParams) {
		PaginationResultRS paginationResult;
		try {
			paginationResult = iReportSectionDataService.getReportSectionsList(listTableParams);
		} catch (ReportSectionApiException ex) {
			logit.error(ReportSectionConstants.EXCEPTION_MESSAGE, ex.getMessage());
			return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(ReportSectionConstants.EXCEPTION_MESSAGE);
		}
		return ResponseEntity.status(HttpStatus.OK).body(paginationResult);
	}

	/**
	 * this method will get the report section record with report items and details
	 * corresponding to input report section ID
	 * 
	 * @param - report section ID
	 */
	@GetMapping(value = "/getreportsectiondetails/{reportSectionId}")
	public ResponseEntity getReportSectionDetails(@PathVariable(name = "reportSectionId") Integer reportSectionId)

	{
		ReportSectionDTO reportSectionDTO = null;
		boolean details = true;
		try {
			reportSectionDTO = iReportSectionDataService.getReportSectionById(reportSectionId, details);
		} catch (ReportSectionApiException ex) {
			logit.error(ReportSectionConstants.EXCEPTION_MESSAGE, ex.getMessage());
			return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(ReportSectionConstants.EXCEPTION_MESSAGE);
		}
		return ResponseEntity.status(HttpStatus.OK).body(reportSectionDTO);
	}

	/**
	 * this method will get the report section record corresponding to input report
	 * section ID
	 * 
	 * @param - details - if true obtain behavior patterns and data rules under the
	 *          report items
	 */
	@GetMapping(value = "/getreportsection/{reportSectionId}")
	public ResponseEntity getReportSection(@PathVariable(name = "reportSectionId") Integer reportSectionId)

	{

		ReportSectionDTO reportSectionDTO = null;
		boolean details = false;
		try {
			reportSectionDTO = iReportSectionDataService.getReportSectionById(reportSectionId, details);
		} catch (ReportSectionApiException ex) {
			logit.error(ReportSectionConstants.EXCEPTION_MESSAGE, ex.getMessage());
			return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(ReportSectionConstants.EXCEPTION_MESSAGE);
		}
		return ResponseEntity.status(HttpStatus.OK).body(reportSectionDTO);
	}

	/**
	 * this method will delete the report section record corresponding to input
	 * report section ID
	 * 
	 * @param - report section ID
	 */
	@DeleteMapping(value = "/deletereportsection/{reportsectionid}")
	public ResponseEntity deleteReportSectionById(
			@PathVariable(name = "reportsectionid") Integer reportSectionId)

	{
		List<String> deleteReportSectionMessages;
		try {
			deleteReportSectionMessages = iReportSectionDataService.deleteReportSection(reportSectionId);
		} catch (ReportSectionApiException ex) {
			logit.error(ReportSectionConstants.EXCEPTION_MESSAGE, ex.getMessage());
			return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(ReportSectionConstants.EXCEPTION_MESSAGE);
		}
		return ResponseEntity.status(HttpStatus.OK).body(deleteReportSectionMessages);
	}

	/**
	 * this method will add a report section
	 * 
	 * @param - reportSectionDTO
	 */
	@PostMapping(value = { "/newreportsection" })
	public ResponseEntity newReportSection(@RequestBody ReportSectionDTO reportSectionDTO) {
		ReportSectionDTO retReportSectionDTO = null;
		String userAccess = "";
		boolean userHasAccess = false;
		try {
			DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(ReportSectionConstants.DATE_FORMAT_MMDDYYYY_HHMMSS_A,
					Locale.ENGLISH);
			Authentication auth =  SecurityContextHolder.getContext().getAuthentication();
			if (auth != null) {
				AppUser user = (AppUser) auth.getPrincipal();
				reportSectionDTO.setCreatedBySystemId(user.getUserSystemId());
				reportSectionDTO.setModifiedBySystemId(user.getUserSystemId());
				List<AccessLevel> userAccessLevels = user.getRole().getAllowedAccesses();
				for (AccessLevel userAccessLevel : userAccessLevels) {
					if (userAccessLevel.getModuleCode().equals("STUDY")) {
						userAccess = userAccessLevel.getAccess();
						break;
					}
				}
				if (userAccess.equals("A") || userAccess.equals("B")) {
					userHasAccess = true;
				}
			}
			if (userHasAccess) {
				LocalDateTime currentLocalDate = LocalDateTime.now(iReportSectionDataService.getZoneId());
				reportSectionDTO.setCreatedDate(dateTimeFormatter.format(currentLocalDate));
				reportSectionDTO.setModifiedDate(dateTimeFormatter.format(currentLocalDate));
				retReportSectionDTO = iReportSectionDataService.addReportSection(reportSectionDTO);
				return ResponseEntity.status(HttpStatus.CREATED).body(retReportSectionDTO);
			} else {
				return new ResponseEntity<String>(ReportSectionConstants.NOT_AUTHORIZED, HttpStatus.FORBIDDEN);
			}	
		} catch (ReportSectionApiException ex) {
			logit.error(ReportSectionConstants.EXCEPTION_MESSAGE, ex.getMessage());
			return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(ReportSectionConstants.EXCEPTION_MESSAGE);
		}
		
	}

	/**
	 * this method will update a report section
	 * 
	 * @param - reportSectionDTO
	 */
	@PutMapping(value = { "/updatereportsection/{reportSectionId}" })
	public ResponseEntity<String> updateReportSection(@PathVariable Integer reportSectionId, @RequestBody ReportSectionDTO reportSectionDTO) {
		String updReportSectionMessage;
		String userAccess = "";
		boolean userHasAccess = false;
		try {
			DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(ReportSectionConstants.DATE_FORMAT_MMDDYYYY_HHMMSS_A,
					Locale.ENGLISH);
			Authentication auth =  SecurityContextHolder.getContext().getAuthentication();
			if (auth != null) {
				AppUser user = (AppUser) auth.getPrincipal();
				reportSectionDTO.setModifiedBySystemId(user.getUserSystemId());
				List<AccessLevel> userAccessLevels = user.getRole().getAllowedAccesses();
				for (AccessLevel userAccessLevel : userAccessLevels) {
					if (userAccessLevel.getModuleCode().equals("STUDY")) {
						userAccess = userAccessLevel.getAccess();
						break;
					}
				}
				if (userAccess.equals("A") || 
						(userAccess.equals("B") && reportSectionDTO.getCreatedBySystemId().equals(user.getUserSystemId()))) {
					userHasAccess = true;
				}
			}
			if (userHasAccess) {
				LocalDateTime currentLocalDate = LocalDateTime.now(iReportSectionDataService.getZoneId());
				reportSectionDTO.setModifiedDate(dateTimeFormatter.format(currentLocalDate));
				updReportSectionMessage = iReportSectionDataService.updateReportSection(reportSectionId, reportSectionDTO);
				return ResponseEntity.status(HttpStatus.OK).body(updReportSectionMessage);
			} else {
				return new ResponseEntity<String>(ReportSectionConstants.NOT_AUTHORIZED, HttpStatus.FORBIDDEN);
			}
				
		} catch (ReportSectionApiException ex) {
			logit.error(ReportSectionConstants.EXCEPTION_MESSAGE, ex.getMessage());
			return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(ReportSectionConstants.EXCEPTION_MESSAGE);
		}
		
	}

	/**
	 * this method will get the available report item records for a Report Section
	 * 
	 * @param - Report Section ID
	 */
	@GetMapping(value = { "/getavailablereportitems/{reportSectionId}" })
	public ResponseEntity getAvailableReportItems(@PathVariable Integer reportSectionId) {
		List<ReportItemDTO> availableReportItemsList;
		try {
			availableReportItemsList = iReportSectionDataService.getAvailableReportItems(reportSectionId);
		} catch (ReportSectionApiException ex) {
			logit.error(ReportSectionConstants.EXCEPTION_MESSAGE, ex.getMessage());
			return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(ReportSectionConstants.EXCEPTION_MESSAGE);
		}
		return ResponseEntity.status(HttpStatus.OK).body(availableReportItemsList);
	}

	/**
	 * this method will get the selected report item records for a report section
	 * 
	 * @param - Report Section ID
	 */
	@GetMapping(value = { "/getselectedreportitems/{reportSectionId}" })
	public ResponseEntity getSelectedReportItems(@PathVariable Integer reportSectionId) {
		List<ReportItemDTO> selectedReportItemsList;
		try {
			selectedReportItemsList = iReportSectionDataService.getSelectedReportItems(reportSectionId);
		} catch (ReportSectionApiException ex) {
			logit.error(ReportSectionConstants.EXCEPTION_MESSAGE, ex.getMessage());
			return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(ReportSectionConstants.EXCEPTION_MESSAGE);
		}
		return ResponseEntity.status(HttpStatus.OK).body(selectedReportItemsList);
	}
	
	/**
	 * this method will give all the Report Section data or records per page for My Items request
	 * 
	 * @param - ListTableParams (contains sort, filter conditions; page number, page
	 *          size)
	 */
	@GetMapping(value = { "/getmyreportsections/" }, headers = "Accept=application/json")
	public ResponseEntity getMyReportSections(ListTableParams listTableParams) {
		PaginationResultRS paginationResult;
		try {
			Authentication auth =  SecurityContextHolder.getContext().getAuthentication();
			if (auth != null) {
				AppUser user = (AppUser) auth.getPrincipal();
				if (listTableParams.getSearchBy() == null) {
					listTableParams.setSearchBy(new ArrayList <String>());
					listTableParams.setSearchInput(new ArrayList <String>());
				}
				listTableParams.getSearchBy().add(ReportSectionConstants.USER_SYSTEM_ID);
				listTableParams.getSearchInput().add(user.getUserSystemId());
			}
			paginationResult = iReportSectionDataService.getReportSectionsList(listTableParams);
		} catch (ReportSectionApiException ex) {
			logit.error(ReportSectionConstants.EXCEPTION_MESSAGE, ex.getMessage());
			return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(ReportSectionConstants.EXCEPTION_MESSAGE);
		}
		return ResponseEntity.status(HttpStatus.OK).body(paginationResult);
	}
}

eIpAddress=0:0:0:0:0:0:0:1, SessionId=9A90FA432C50B66BFF70D1FFE8EA0518]
2025-07-04T11:26:48.963+05:30  WARN 17064 --- [nio-8080-exec-6] o.s.s.a.event.LoggerListener             : Authentication event InteractiveAuthenticationSuccessEvent: SG6234283; details: WebAuthenticationDetails [RemoteIpAddress=0:0:0:0:0:0:0:1, SessionId=9A90FA432C50B66BFF70D1FFE8EA0518]
2025-07-04T11:27:06.462+05:30  WARN 17064 --- [nio-8080-exec-7] o.s.web.servlet.PageNotFound             : No mapping for GET /fads/reportgroup/getreportsections/
2025-07-04T11:27:06.462+05:30  WARN 17064 --- [nio-8080-exec-7] o.s.web.servlet.PageNotFound             : No endpoint GET /fads/reportgroup/getreportsections/.
2025-07-04T11:27:07.572+05:30  WARN 17064 --- [io-8080-exec-10] o.s.web.servlet.PageNotFound             : No mapping for GET /fads/reportgroup/getreportsections/
2025-07-04T11:27:07.573+05:30  WARN 17064 --- [io-8080-exec-10] o.s.web.servlet.PageNotFound             : No endpoint GET /fads/reportgroup/getreportsections/.
2025-07-04T11:27:09.601+05:30  WARN 17064 --- [nio-8080-exec-9] o.s.web.servlet.PageNotFound             : No mapping for GET /fads/reportgroup/getreportsections/
2025-07-04T11:27:09.602+05:30  WARN 17064 --- [nio-8080-exec-9] o.s.web.servlet.PageNotFound             : No endpoint GET /fads/reportgroup/getreportsections/.
2025-07-04T11:27:13.615+05:30  WARN 17064 --- [nio-8080-exec-2] o.s.web.servlet.PageNotFound             : No mapping for GET /fads/reportgroup/getreportsections/
2025-07-04T11:27:13.616+05:30  WARN 17064 --- [nio-8080-exec-2] o.s.web.servlet.PageNotFound             : No endpoint GET /fads/reportgroup/getreportsections/.
2025-07-04T11:28:55.236+05:30  WARN 17064 --- [nio-8080-exec-7] o.s.web.servlet.PageNotFound             : No mapping for GET /fads/reportgroup/getreportsections/
2025-07-04T11:28:55.239+05:30  WARN 17064 --- [nio-8080-exec-7] o.s.web.servlet.PageNotFound             : No endpoint GET /fads/reportgroup/getreportsections/.
2025-07-04T11:29:04.257+05:30  WARN 17064 --- [io-8080-exec-10] o.s.web.servlet.PageNotFound             : No mapping for GET /fads/getreportsections/
2025-07-04T11:29:04.259+05:30  WARN 17064 --- [io-8080-exec-10] o.s.web.servlet.PageNotFound             : No endpoint GET /fads/getreportsections/.
