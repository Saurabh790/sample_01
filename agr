public PaginationResult getJobsOnSearchCriteria(ListTableParams listTableParams) {
        Pageable pageable = null;
        String studyNameVal = JobsConstants.PERCENT_STR;
        String jobStatusVal = JobsConstants.PERCENT_STR;
        String createdByVal = JobsConstants.PERCENT_STR;
        String userIdVal = JobsConstants.PERCENT_STR;
        String searchInput;
        String searchBy;
        int jobIdValInt = 0;
        int jobsCount;
        int myItemsIndex = -1;
        int searchCritSize = 0;
        boolean spChInJobName = false;
        boolean jobIdSelected = false;
        List<JobDTO> jobsDataList;
        List<JobMasterT> jobsList = null;
        List<JobMasterT> jobsCntList = null;
        PaginationResult paginationResult = new PaginationResult();
        logit.info(" Going to fetch Job Monitor Records content getJobsOnSearchCriteria inside  ");
        pageable = createPageable(listTableParams);
        if (listTableParams.getSearchBy().contains(JobsConstants.USER_SYSTEM_ID)) {
            myItemsIndex = listTableParams.getSearchBy().indexOf(JobsConstants.USER_SYSTEM_ID);
        }
        searchCritSize = listTableParams.getSearchBy().size();

        for (int index = 0; index < searchCritSize; index++) {
            searchInput = listTableParams.getSearchInput().get(index).toLowerCase();
            searchBy = listTableParams.getSearchBy().get(index);
            switch (searchBy) {
                case JobsConstants.JOB_STATUS_DESC:
                    jobStatusVal = JobsConstants.PERCENT_STR + searchInput + JobsConstants.PERCENT_STR;
                    break;
                case JobsConstants.STUDY_NAME:
                    if (StringUtils.containsAny(searchInput, JobsConstants.PERCENT_CHAR)
                            || StringUtils.containsAny(searchInput, JobsConstants.UNDERSCORE_CHAR)) {
                        spChInJobName = true;
                    }
                    studyNameVal = ServiceUtil.replStudyName(searchInput);
                    break;
                case JobsConstants.CREATED_BY:
                    if (StringUtils.containsWhitespace(searchInput)) {
                        searchInput = searchInput.trim();
                        searchInput = searchInput.replaceAll("\\s+", " ");
                    }
                    createdByVal = JobsConstants.PERCENT_STR + searchInput + JobsConstants.PERCENT_STR;
                    break;
                case JobsConstants.USER_SYSTEM_ID:
                    userIdVal = searchInput;
                    break;
                case JobsConstants.JOB_ID:
                    jobIdValInt = Integer.parseInt(searchInput);
                    jobIdSelected = true;
                    break;
                default:
                    break;
            }
        }

        if (jobIdSelected) {    // Only one record will be retrieved for a job ID
            if (myItemsIndex >= 0) {        // Retrieve my items
                jobsList = jobsRepository.getMyJobsBySearchCriteriaWithJobId(jobStatusVal, studyNameVal, createdByVal, userIdVal, jobIdValInt, pageable);
            } else {
                jobsList = jobsRepository.getJobsBySearchCriteriaWithJobId(jobStatusVal, studyNameVal, createdByVal, jobIdValInt, pageable);
            }
            jobsCntList = jobsList;
        } else if (spChInJobName) {
            if (myItemsIndex >= 0) {        // Retrieve my items
                jobsCntList = jobsRepository.getMyJobsBySearchCriteria(jobStatusVal, studyNameVal, createdByVal, userIdVal, null);
                jobsList = jobsRepository.getMyJobsBySearchCriteria(jobStatusVal, studyNameVal, createdByVal, userIdVal, pageable);
            } else {
                jobsCntList = jobsRepository.getJobsBySearchCriteria(jobStatusVal, studyNameVal, createdByVal, null);
                jobsList = jobsRepository.getJobsBySearchCriteria(jobStatusVal, studyNameVal, createdByVal, pageable);
            }
        } else {
            if (myItemsIndex >= 0) {        // Retrieve my items
                jobsCntList = jobsRepository.getMyJobsBySearchCriteria(jobStatusVal, studyNameVal, createdByVal, userIdVal, null);
                jobsList = jobsRepository.getMyJobsBySearchCriteria(jobStatusVal, studyNameVal, createdByVal, userIdVal, pageable);
            } else {
                jobsCntList = jobsRepository.getJobsBySearchCriteria(jobStatusVal, studyNameVal, createdByVal, null);
                jobsList = jobsRepository.getJobsBySearchCriteria(jobStatusVal, studyNameVal, createdByVal, pageable);
            }
        }
        jobsCount = jobsCntList.size();
        logit.info("jobs List size {}", jobsCount);
        if (!jobsList.isEmpty()) {
            jobsDataList = jobDetailMapper.convertToJobDTOs(jobsList);//populateJobDataList(jobsList);
            if (listTableParams.getSortBy().equals(JobsConstants.CASE_COUNT)) {
                if (listTableParams.getSortOrder() > 0) {
                    jobsDataList.sort(Comparator.comparing(JobDTO::getCaseCount));
                } else {
                    jobsDataList.sort(Comparator.comparing(JobDTO::getCaseCount).reversed());
                }
            }
            paginationResult.setJobsData(jobsDataList);
            paginationResult.setTotalRecordsCount(jobsCount);
        } else {
            paginationResult.setJobsData(new ArrayList<>());
            paginationResult.setTotalRecordsCount(jobsList.size());
        }
        return paginationResult;
    }
