/*
//***********************************************
// Copyright UNITEDHEALTH GROUP CORPORATION 2018.
// This software and documentation contain confidential and
// proprietary information owned by UnitedHealth Group Corporation.
// Unauthorized use and distribution are prohibited.
//***********************************************
*/

package com.optum.fads.pgp.datarules.controller;

import java.util.ArrayList;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.optum.fads.pgp.datarules.common.constants.DataRuleConstants;
import com.optum.fads.pgp.datarules.dto.DataElementDTO;
import com.optum.fads.pgp.datarules.dto.LUValueDTO;
import com.optum.fads.pgp.datarules.exception.DataRulesApiException;
import com.optum.fads.pgp.datarules.service.IDataElementDataService;

/**
* Use this class to add the methods so that a single web service can be used to
* get and update the FADS Data elements data 
*
** @author Anil Wagh
*/

@RestController
@RequestMapping("/datarules")
public class DataElementsController {

    private static final Logger logit = LoggerFactory
			.getLogger(DataElementsController.class);
    @Autowired
	IDataElementDataService iDataElementDataService;
	
	/**
	 * this method will get data element records   
	 * @param - datasource (All, Provider, Claim, Member)
	 */
	@GetMapping(value = "/getdataelementslist", headers="Accept=application/json")
	 public ResponseEntity getDataElements(String datasource)
	 
	{   
		List<DataElementDTO> dataElementList;
		 try {
			 dataElementList = iDataElementDataService.getDataElements(datasource);
		 } catch (DataRulesApiException ex) {
			 logit.error("Exception retrieving Data Elements: {}", ex.getMessage());
	         return ResponseEntity.
	           		status(HttpStatus.BAD_REQUEST)
	           		.body(DataRuleConstants.EXCEPTION_MESSAGE);
		    }		
		return ResponseEntity
		       .status(HttpStatus.OK)                 
		       .body(dataElementList);
	}
	/**
	 * this method will get a data element by ID with available code values   
	 * @param - dataelementId 
	 */
	/*
	@GetMapping(value = "/getdataelement/{dataelementId}")
	 public ResponseEntity getDataElementById(@PathVariable(name = "dataelementId") Integer dataElementId)
	 */
	
	@GetMapping(value = {"/getdataelement/{dataelementId}", "/getdataelement/{dataelementId}/{selectedItemCds}"})
	 public ResponseEntity getDataElementById(@PathVariable(name = "dataelementId") Integer dataElementId,
			 @PathVariable(required = false) List<String> selectedItemCds)
	{   
		DataElementDTO dataElement;
		if (selectedItemCds == null) {
			selectedItemCds = new ArrayList<>();
		}
		logit.info(" selectedItemCds size = {}", selectedItemCds.size());
		 try {
			 dataElement = iDataElementDataService.getdataelement(dataElementId, selectedItemCds);
		 } catch (DataRulesApiException ex) {
			 logit.error(ex.getMessage());
	         return ResponseEntity.
	           		status(HttpStatus.BAD_REQUEST)
	           		.body(DataRuleConstants.EXCEPTION_MESSAGE);
		    }		
		return ResponseEntity
		       .status(HttpStatus.OK)                 
		       .body(dataElement);
	}
	/**
	 * this method will get the data Source element records (All, Provider, Member, Claim)
	 * @param - None 
	 */
	@GetMapping(value = "/getdatasourceelements")
	 public ResponseEntity<List<LUValueDTO>> getDataSourceElements()
	 
	{   
		List<LUValueDTO> dataSourceElementList;
		 try {
			 dataSourceElementList = iDataElementDataService.findAllDataSourceElements();
		 } catch (DataRulesApiException ex) {
			 logit.error("Exception retrieving Data Source Elements: {}", ex.getMessage());
			 dataSourceElementList = new ArrayList<>();
	         return ResponseEntity.
	           		status(HttpStatus.BAD_REQUEST)
	           		.body(dataSourceElementList);
		    }		
		return ResponseEntity
		       .status(HttpStatus.OK)                 
		       .body(dataSourceElementList);
	}
	/**
	 * this method will get a data elements corresponding to BA_ID in the Behavior Pattern   
	 * @param - baId 
	 */
	@GetMapping(value = "/getbpdataelements/{baId}")
	 public ResponseEntity getBpDataElements(@PathVariable(name = "baId") String baId)
	 
	{   
		List<DataElementDTO> dataElementList;
		 try {
			 dataElementList = iDataElementDataService.getBpTypeDataElements(baId);
		 } catch (DataRulesApiException ex) {
			 logit.error(ex.getMessage());
	         return ResponseEntity.
	           		status(HttpStatus.BAD_REQUEST)
	           		.body(DataRuleConstants.EXCEPTION_MESSAGE);
		    }		
		return ResponseEntity
		       .status(HttpStatus.OK)                 
		       .body(dataElementList);
	}
	/**
	 * this method will get all date elements    
	 * @param - none 
	 */
	@GetMapping(value = "/getalldateelements")
	 public ResponseEntity getallDateElements()
	 
	{   
		List<DataElementDTO> dateElementsList;
		 try {
			 dateElementsList = iDataElementDataService.getAllDateElements();
		 } catch (DataRulesApiException ex) {
			 logit.error(ex.getMessage());
	         return ResponseEntity.
	           		status(HttpStatus.BAD_REQUEST)
	           		.body(DataRuleConstants.EXCEPTION_MESSAGE);
		    }		
		return ResponseEntity
		       .status(HttpStatus.OK)                 
		       .body(dateElementsList);
	}
}

equest URL
http://localhost:8080/fads/datarules/getdataelementslist?datasource=all
Request Method
GET
Status Code
400 Bad Request
Remote Address
[::1]:8080
Referrer Policy
strict-origin-when-cross-origin
