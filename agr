package com.optum.fads.pgp.reportsection.api.controller;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.mockito.Mockito.doReturn;

import java.util.ArrayList;
import java.util.List;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import org.springframework.http.ResponseEntity;
import org.springframework.test.context.web.WebAppConfiguration;

import com.optum.fads.pgp.reportsection.api.common.ListTableParams;
import com.optum.fads.pgp.reportsection.api.common.constants.ReportSectionConstants;
import com.optum.fads.pgp.reportsection.api.dto.BehaviorPatternDTO;
import com.optum.fads.pgp.reportsection.api.dto.PaginationResultRI;
import com.optum.fads.pgp.reportsection.api.dto.ReportItemDTO;
import com.optum.fads.pgp.reportsection.api.service.impl.ReportItemDataService;

@RunWith(MockitoJUnitRunner.class) 
@WebAppConfiguration
public class ReportItemControllerTests {

 //   @Autowired
 //   ReportItemController reportItemController;
    @InjectMocks
    private ReportItemController reportItemController;

    @Mock
    private ReportItemDataService reportItemDataService;
    
    private ReportItemDTO reportItemDTON;
    
    @Before
    public void setUp() {
    	
    	reportItemDTON = new ReportItemDTO();
    	reportItemDTON.setReportItemId(2092);
    	
    }

    @Test
    public void testGetReportItemById(){
    	
    	doReturn(reportItemDTON).when(reportItemDataService).getReportItemById(reportItemDTON.getReportItemId());
		@SuppressWarnings("unchecked")
		ResponseEntity<ReportItemDTO> responseEntity = reportItemController.getReportItemById(reportItemDTON.getReportItemId());
        assertNotNull(responseEntity);
        assertEquals(responseEntity.getBody().getReportItemId(), reportItemDTON.getReportItemId());
        
   	//	assertEquals(reportItem.getNumeratorBehaviorPatterns().size(), 1);
    //	assertEquals(reportItem.getDenominatorBehaviorPatterns().size(), 1);
    	
    }
    
    @Test
    public void testGetReportItems(){
//	public ResponseEntity getReportItems(ListTableParams listTableParams) {
		PaginationResultRI paginationResult = new PaginationResultRI();
		List<ReportItemDTO> reportItemsList = new ArrayList<>();
		ListTableParams listTableParams = new ListTableParams();
		List<String> searchByParm = new ArrayList<>();
		List<String> searchInputParm = new ArrayList<>();
		listTableParams.setSortBy("reportItemName");
		listTableParams.setSortOrder(1);
		listTableParams.setPageNumber(1);
		listTableParams.setRecordsPerPage(10);
		searchByParm.add("reportItemName");
		searchByParm.add("createdBy");
		searchInputParm.add("opioids");
		searchInputParm.add("mcloud");
		listTableParams.setSearchBy(searchByParm);
		listTableParams.setSearchInput(searchInputParm);
		
		ReportItemDTO reportItemDTO1 = new ReportItemDTO();
    	reportItemDTO1.setReportItemId(2030);
    	reportItemDTO1.setReportItemName("O:Opioids; #clm lines");
    	reportItemDTO1.setCreatedBy("MS33686548");
    	reportItemDTO1.setRatioOf("Sum");
    	reportItemDTO1.setMinimumDenominator(1);
    	reportItemDTO1.setCalcFMT(1);
    	reportItemsList.add(reportItemDTO1);
    	
    	ReportItemDTO reportItemDTO2 = new ReportItemDTO();
    	reportItemDTO2.setReportItemId(2031);
    	reportItemDTO2.setReportItemName("O:Opioids; d# NDCs");
    	reportItemDTO2.setCreatedBy("MS33686548");
    	reportItemsList.add(reportItemDTO2);
    	
    	ReportItemDTO reportItemDTO3 = new ReportItemDTO();
    	reportItemDTO3.setReportItemId(2032);
    	reportItemDTO3.setReportItemName("O:Opioids; d# pharmacies");
    	reportItemDTO3.setCreatedBy("MS33686548");
    	reportItemsList.add(reportItemDTO3);
    	
    	ReportItemDTO reportItemDTO4 = new ReportItemDTO();
    	reportItemDTO4.setReportItemId(2033);
    	reportItemDTO4.setReportItemName("O:Opioids; d# prescribers");
    	reportItemDTO4.setCreatedBy("MS33686548");
    	reportItemsList.add(reportItemDTO4);
    	
    	ReportItemDTO reportItemDTO5 = new ReportItemDTO();
    	reportItemDTO5.setReportItemId(2034);
    	reportItemDTO5.setReportItemName("O:Opioids; sum day supply");
    	reportItemDTO5.setCreatedBy("MS33686548");
    	reportItemsList.add(reportItemDTO5);
    	
    	ReportItemDTO reportItemDTO6 = new ReportItemDTO();
    	reportItemDTO6.setReportItemId(2035);
    	reportItemDTO6.setReportItemName("O:Opioids; sum day quantity");
    	reportItemDTO6.setCreatedBy("MS33686548");
    	reportItemsList.add(reportItemDTO6);
    	
    	ReportItemDTO reportItemDTO7 = new ReportItemDTO();
    	reportItemDTO7.setReportItemId(2036);
    	reportItemDTO7.setReportItemName("O:Opioids; sum $ paid");
    	reportItemDTO7.setCreatedBy("MS33686548");
    	reportItemsList.add(reportItemDTO7);
		
    	paginationResult.setReportItemsData(reportItemsList);
    	paginationResult.setTotalRecordsCount(reportItemsList.size());
			
    	doReturn(paginationResult).when(reportItemDataService).getReportItemsList(listTableParams);
		@SuppressWarnings("unchecked")
		ResponseEntity<PaginationResultRI> responseEntity = reportItemController.getReportItems(listTableParams);
        assertNotNull(responseEntity);
		assertEquals(responseEntity.getBody().getTotalRecordsCount(), reportItemsList.size());
		
   }
    
    @Test
    public void testDeleteReportItem(){
    	List<String> deleteReportItemMessages = new ArrayList<>();
    	deleteReportItemMessages.add(ReportSectionConstants.DELETE_REPORT_ITEM_SUCCESS);
    	doReturn(deleteReportItemMessages).when(reportItemDataService).deleteReportItem(reportItemDTON.getReportItemId());
    	ResponseEntity responseEntity = reportItemController.deleteReportItemById(reportItemDTON.getReportItemId());
    	assertNotNull(responseEntity);
    	List<String> deleteReportItemOutList = (List<String>) responseEntity.getBody();
		assertEquals(ReportSectionConstants.DELETE_REPORT_ITEM_SUCCESS, deleteReportItemOutList.get(0));
    }
   /* 
    @Test
    public void testNewReportItem() {
		
		 String userId = "PP3188253";
		 ReportItemDTO reportItemDTO =new ReportItemDTO();
		 ReportItemDTO retReportItemDTO =new ReportItemDTO();
		 retReportItemDTO.setReportItemId(999);
		 reportItemDTO.setReportItemName("O:% Hosp Care Sub Comp to All Care Sub; #clm lines");
		 reportItemDTO.setModifiedBy(userId);
		 reportItemDTO.setOrder(1);
	    List<BehaviorPatternDTO> numBehaviorPatterns = new ArrayList<>();
	    BehaviorPatternDTO behaviorPatternDTO1 = new BehaviorPatternDTO();
	    behaviorPatternDTO1.setBehaviorPatternId(288); 
	    behaviorPatternDTO1.setType(ReportSectionConstants.NUM_STR);
	    behaviorPatternDTO1.setOperator(ReportSectionConstants.PLUS_STR);
	    numBehaviorPatterns.add(behaviorPatternDTO1);
	    BehaviorPatternDTO behaviorPatternDTO2 = new BehaviorPatternDTO();
	    behaviorPatternDTO2.setBehaviorPatternId(289); 
	    behaviorPatternDTO2.setType(ReportSectionConstants.NUM_STR );
	    behaviorPatternDTO2.setOperator(ReportSectionConstants.DEN_STR);
	    numBehaviorPatterns.add(behaviorPatternDTO2);
	    reportItemDTO.setNumeratorBehaviorPatterns(numBehaviorPatterns);
	    
	    List<BehaviorPatternDTO> denBehaviorPatterns = new ArrayList<>();
	    BehaviorPatternDTO behaviorPatternDTO3 = new BehaviorPatternDTO();
	    behaviorPatternDTO3.setBehaviorPatternId(290); 
	    behaviorPatternDTO3.setType(ReportSectionConstants.DEN_STR);
	    behaviorPatternDTO3.setOperator(ReportSectionConstants.PLUS_STR);
	    denBehaviorPatterns.add(behaviorPatternDTO3);
	    reportItemDTO.setDenominatorBehaviorPatterns(denBehaviorPatterns);			
    
	    doReturn(retReportItemDTO).when(reportItemDataService).addReportItem(reportItemDTO);
//	    when(reportItemDataService.addReportItem(any(reportItemDTO.class))).thenReturn("999");
        
        ResponseEntity<String> responseEntity = reportItemController.newReportItem(reportItemDTO);
        assertThat(responseEntity.getStatusCode()).isEqualTo(HttpStatus.OK);
  //      assertThat(responseEntity.getHeaders().getLocation().getPath()).isEqualTo("/1")
	    
    } 
   
    @Test
    public void testUpdateReportItem() {
    	
    	Integer reportItemId = 999;		// 2018
		
		 String userId = "PP3188253";
		 ReportItemDTO reportItemDTO =new ReportItemDTO();
		 reportItemDTO.setReportItemId(reportItemId);
		 reportItemDTO.setReportItemName("O:% Hosp Care Sub Comp to All Care Sub; #clm lines");
		 reportItemDTO.setModifiedBy(userId);
		 reportItemDTO.setOrder(1);
	    List<BehaviorPatternDTO> numBehaviorPatterns = new ArrayList<>();
	    BehaviorPatternDTO behaviorPatternDTO1 = new BehaviorPatternDTO();
	    behaviorPatternDTO1.setBehaviorPatternId(288); 
	    behaviorPatternDTO1.setType(ReportSectionConstants.NUM_STR);
	    behaviorPatternDTO1.setOperator(ReportSectionConstants.PLUS_STR);
	    numBehaviorPatterns.add(behaviorPatternDTO1);
	    BehaviorPatternDTO behaviorPatternDTO2 = new BehaviorPatternDTO();
	    behaviorPatternDTO2.setBehaviorPatternId(289); 
	    behaviorPatternDTO2.setType(ReportSectionConstants.NUM_STR );
	    behaviorPatternDTO2.setOperator(ReportSectionConstants.DEN_STR);
	    numBehaviorPatterns.add(behaviorPatternDTO2);
	    reportItemDTO.setNumeratorBehaviorPatterns(numBehaviorPatterns);
	    
	    List<BehaviorPatternDTO> denBehaviorPatterns = new ArrayList<>();
	    BehaviorPatternDTO behaviorPatternDTO3 = new BehaviorPatternDTO();
	    behaviorPatternDTO3.setBehaviorPatternId(290); 
	    behaviorPatternDTO3.setType(ReportSectionConstants.DEN_STR);
	    behaviorPatternDTO3.setOperator(ReportSectionConstants.PLUS_STR);
	    denBehaviorPatterns.add(behaviorPatternDTO3);
	    reportItemDTO.setDenominatorBehaviorPatterns(denBehaviorPatterns);			
    
	    doReturn(ReportSectionConstants.UPDATE_REPORT_ITEM_SUCCESS).when(reportItemDataService).updateReportItem(reportItemDTO.getReportItemId(), reportItemDTO);
//	    when(reportItemDataService.addReportItem(any(reportItemDTO.class))).thenReturn("999");
        
        ResponseEntity<String> responseEntity = reportItemController.updateReportItem(reportItemDTO.getReportItemId(), reportItemDTO);
        assertThat(responseEntity.getStatusCode()).isEqualTo(HttpStatus.OK);
  //      assertThat(responseEntity.getHeaders().getLocation().getPath()).isEqualTo("/1")
	    
    } 
  */  
    @Test
    public void testGetAvailableBehaviorPatterns(){
    	List<BehaviorPatternDTO> availableBehaviorPatternList = new ArrayList<>();
    	Integer reportItemId = 2763;		
		
		BehaviorPatternDTO behaviorPatternDTO1 = new BehaviorPatternDTO();
		behaviorPatternDTO1.setBehaviorPatternId(1087);
		behaviorPatternDTO1.setErId(1051);
		behaviorPatternDTO1.setThisBpRequiresDr(true);
		behaviorPatternDTO1.setBaId("1");
		behaviorPatternDTO1.setBehaviorPatternName("O:Labs, POS 81, $pd");
		behaviorPatternDTO1.setDataElementCode(295);	// ??
		availableBehaviorPatternList.add(behaviorPatternDTO1);
    	
		BehaviorPatternDTO behaviorPatternDTO2 = new BehaviorPatternDTO();
		behaviorPatternDTO2.setBehaviorPatternId(1085);
		behaviorPatternDTO2.setErId(1049);
		behaviorPatternDTO2.setThisBpRequiresDr(true);
		behaviorPatternDTO2.setBaId("2");
		behaviorPatternDTO2.setBehaviorPatternName("O:Labs, POS 81, #clms");
		behaviorPatternDTO2.setDataElementCode(291);	
		availableBehaviorPatternList.add(behaviorPatternDTO2);
    		
    	doReturn(availableBehaviorPatternList).when(reportItemDataService).getAvailableBehaviorPatterns(reportItemId);
		@SuppressWarnings("unchecked")
		ResponseEntity<List<BehaviorPatternDTO>> responseEntity = reportItemController.getAvailableBehaviors(reportItemId);
        assertNotNull(responseEntity);
		assertEquals(behaviorPatternDTO1.getBehaviorPatternName(), responseEntity.getBody().get(0).getBehaviorPatternName());
		assertEquals(behaviorPatternDTO2.getBehaviorPatternName(), responseEntity.getBody().get(1).getBehaviorPatternName());
   }
    
    @Test
    public void testGetSelectedBehaviorPatterns(){
    	List<BehaviorPatternDTO> selectedBehaviorPatternList = new ArrayList<>();
    	Integer reportItemId = 2018;		
		
		BehaviorPatternDTO behaviorPatternDTO1 = new BehaviorPatternDTO();
		behaviorPatternDTO1.setBehaviorPatternId(585);
		behaviorPatternDTO1.setErId(551);
		behaviorPatternDTO1.setThisBpRequiresDr(true);
		behaviorPatternDTO1.setBaId("3");
		behaviorPatternDTO1.setBehaviorPatternName("Dental, Rend, SSCrowns Age 0-6, #clms");
		behaviorPatternDTO1.setDataElementCode(295);	
		selectedBehaviorPatternList.add(behaviorPatternDTO1);
    	
		BehaviorPatternDTO behaviorPatternDTO2 = new BehaviorPatternDTO();
		behaviorPatternDTO2.setBehaviorPatternId(586);
		behaviorPatternDTO2.setErId(552);
		behaviorPatternDTO2.setThisBpRequiresDr(true);
		behaviorPatternDTO2.setBaId("2");
		behaviorPatternDTO2.setBehaviorPatternName("Dental, Rend, SSCrowns, Ages 0-6, d#recips");
		behaviorPatternDTO2.setDataElementCode(251);	
		selectedBehaviorPatternList.add(behaviorPatternDTO2);
    		
    	doReturn(selectedBehaviorPatternList).when(reportItemDataService).getSelectedBehaviorPatterns(reportItemId);
		@SuppressWarnings("unchecked")
		ResponseEntity<List<BehaviorPatternDTO>> responseEntity = reportItemController.getSelectedBehaviors(reportItemId);
        assertNotNull(responseEntity);
        assertEquals(behaviorPatternDTO1.getBehaviorPatternName(), responseEntity.getBody().get(0).getBehaviorPatternName());
		assertEquals(behaviorPatternDTO2.getBehaviorPatternName(), responseEntity.getBody().get(1).getBehaviorPatternName());
		
   }
    

}
