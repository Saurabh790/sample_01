@GetMapping(value = {"/getdataelement/{dataelementId}", "/getdataelement/{dataelementId}/{selectedItemCds}"})
	 public ResponseEntity getDataElementById(@PathVariable(name = "dataelementId") Integer dataElementId,
			 @PathVariable(required = false) List<String> selectedItemCds)
	{   
		DataElementDTO dataElement;
		if (selectedItemCds == null) {
			selectedItemCds = new ArrayList<>();
		}
		logit.info(" selectedItemCds size = {}", selectedItemCds.size());
		 try {
			 dataElement = iDataElementDataService.getdataelement(dataElementId, selectedItemCds);
		 } catch (DataRulesApiException ex) {
			 logit.error(ex.getMessage());
	         return ResponseEntity.
	           		status(HttpStatus.BAD_REQUEST)
	           		.body(DataRuleConstants.EXCEPTION_MESSAGE);
		    }		
		return ResponseEntity
		       .status(HttpStatus.OK)                 
		       .body(dataElement);
	}
	
	
	 public DataElementDTO getdataelement(Integer dataElementId, List <String> selectedItemCds){
			logit.info(" Obtain data element ID = {}", dataElementId );
			List<Object[]> dataElementRS;
			DataElementDTO dataElementDTO = null;
			try {
				dataElementRS = dataRuleMBRepository.retrieveDataElementById(dataElementId);
				List<DataElementDTO> dataElementList = populateDataElementList(dataElementRS);
				if (!dataElementList.isEmpty()) {
					dataElementDTO = dataElementList.get(0);
					if(dataElementDTO.getLuFlag()!=null && !dataElementDTO.getLuFlag().equals("0")) {
						dataElementDTO.setAvailValues(getAvailableValues(dataElementDTO, selectedItemCds));
					}     	
				}
			} catch (Exception e) {
				throw new DataRulesApiException(DataRuleConstants.EXCEPTION_MESSAGE, e);
			} 
	        return dataElementDTO;
		}
		
		
		@Query("SELECT p.mbCtecFid,p.mbCustDatadesc,p.mbCtecFtype,p.mbLuFlag,p.mbLuSql,f.luLabel  "
			+ "FROM PrmMbMasterT p, FadsLuValuesT f WHERE TO_CHAR(p.drElementClass) = f.id.luValue "
			+ " AND f.id.fieldId = 'DR_ELEMENT_CLASS' AND p.mbCtecFid = :dataElementId")
	List<Object[]> retrieveDataElementById(@Param("dataElementId") Integer dataElementId);
	




private List<DataElementDTO> populateDataElementList(List<Object[]> dataElementRS) {
		 List<DataElementDTO> dataElementDataList = new ArrayList<>(); 
			if (!dataElementRS.isEmpty()) {
				for (Object[] dataElementData : dataElementRS) {	
					DataElementDTO dataElementDTO = new DataElementDTO();
					dataElementDTO.setId((int)dataElementData[0]); //mbCtecFid
					dataElementDTO.setName((String)dataElementData[1]); //mbCustDatadesc
					dataElementDTO.setDataType((String)dataElementData[2]); //mbCtecFtype
					dataElementDTO.setLuFlag(String.valueOf(dataElementData[3])); //mbLuFlag
					dataElementDTO.setValueSQL((String)dataElementData[4]); //mbLuSql
					dataElementDTO.setDataSource((String)dataElementData[5]); //luLabel
					dataElementDTO.setAvailValues(new ArrayList<>());
					dataElementDataList.add(dataElementDTO);
				}  
	       } else {
	    	   throw new DataRulesApiException(DataRuleConstants.NO_DATA_FOUND_MSG);
			}
		 return dataElementDataList;
	 }
2025-06-26 14:14:48 [http-nio-8080-exec-1] DEBUG o.s.web.servlet.DispatcherServlet - GET "/fads/datarules/getdataelement/141", parameters={}
2025-06-26 14:14:48 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.optum.fads.pgp.datarules.controller.DataElementsController#getDataElementById(Integer, List)
2025-06-26 14:14:48 [http-nio-8080-exec-1] DEBUG o.s.o.j.s.OpenEntityManagerInViewInterceptor - Opening JPA EntityManager in OpenEntityManagerInViewInterceptor
2025-06-26 14:14:48 [http-nio-8080-exec-1] INFO  c.o.f.p.d.c.DataElementsController -  selectedItemCds size = 0
2025-06-26 14:14:48 [http-nio-8080-exec-1] INFO  c.o.f.p.d.s.i.DataElementDataService -  Obtain data element ID = 141
2025-06-26 14:14:48 [http-nio-8080-exec-1] DEBUG o.s.orm.jpa.JpaTransactionManager - Found thread-bound EntityManager [SessionImpl(691440087<open>)] for JPA transaction
2025-06-26 14:14:48 [http-nio-8080-exec-1] DEBUG o.s.orm.jpa.JpaTransactionManager - Creating new transaction with name [org.springframework.data.jpa.repository.support.SimpleJpaRepository.retrieveDataElementById]: PROPAGATION_REQUIRED,ISOLATION_DEFAULT
2025-06-26 14:14:48 [http-nio-8080-exec-1] DEBUG o.s.j.d.DriverManagerDataSource - Creating new JDBC DriverManager Connection to [jdbc:oracle:thin:@//wn000193163.ms.ds.uhc.com:1521/XEPDB1]
2025-06-26 14:14:48 [http-nio-8080-exec-1] DEBUG o.s.orm.jpa.JpaTransactionManager - Exposing JPA transaction as JDBC [org.springframework.orm.jpa.vendor.HibernateJpaDialect$HibernateConnectionHandle@761cb31b]
2025-06-26 14:14:48 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - select pmmt1_0.MB_CTEC_FID,pmmt1_0.MB_CUST_DATADESC,pmmt1_0.MB_CTEC_FTYPE,pmmt1_0.MB_LU_FLAG,pmmt1_0.MB_LU_SQL,flvt1_0.LU_LABEL from PRM_MB_MASTER_T pmmt1_0,FADS_LU_VALUES_T flvt1_0 where to_char(pmmt1_0.DR_ELEMENT_CLASS)=flvt1_0.LU_VALUE and flvt1_0.FIELD_ID='DR_ELEMENT_CLASS' and pmmt1_0.MB_CTEC_FID=?
2025-06-26 14:14:48 [http-nio-8080-exec-1] DEBUG o.s.orm.jpa.JpaTransactionManager - Initiating transaction commit
2025-06-26 14:14:48 [http-nio-8080-exec-1] DEBUG o.s.orm.jpa.JpaTransactionManager - Committing JPA transaction on EntityManager [SessionImpl(691440087<open>)]
2025-06-26 14:14:48 [http-nio-8080-exec-1] DEBUG o.s.orm.jpa.JpaTransactionManager - Not closing pre-bound JPA EntityManager after transaction
2025-06-26 14:14:48 [http-nio-8080-exec-1] INFO  c.o.f.p.d.s.i.DataElementDataService -  Obtain avail values for Data ElementID 141 
2025-06-26 14:14:48 [http-nio-8080-exec-1] DEBUG o.s.jdbc.core.JdbcTemplate - Executing SQL query [SELECT R_VV_CD, R_VV_SHORT_DESCR FROM DM_VALID_VALUE_T WHERE R_VV_ID= 'DW']
2025-06-26 14:14:48 [http-nio-8080-exec-1] DEBUG o.s.jdbc.datasource.DataSourceUtils - Fetching JDBC Connection from DataSource
2025-06-26 14:14:48 [http-nio-8080-exec-1] DEBUG o.s.j.d.DriverManagerDataSource - Creating new JDBC DriverManager Connection to [jdbc:oracle:thin:@//wn000193163.ms.ds.uhc.com:1521/XEPDB1]
2025-06-26 14:14:48 [http-nio-8080-exec-1] ERROR c.o.f.p.d.c.DataElementsController - Exception occured StatementCallback; bad SQL grammar [SELECT R_VV_CD, R_VV_SHORT_DESCR FROM DM_VALID_VALUE_T WHERE R_VV_ID= 'DW']
2025-06-26 14:14:48 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [application/json] and supported [text/plain, */*, application/json, application/*+json]
2025-06-26 14:14:48 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing ["Exception occured "]
2025-06-26 14:14:48 [http-nio-8080-exec-1] DEBUG o.s.o.j.s.OpenEntityManagerInViewInterceptor - Closing JPA EntityManager in OpenEntityManagerInViewInterceptor
2025-06-26 14:14:48 [http-nio-8080-exec-1] DEBUG o.s.web.servlet.DispatcherServlet - Completed 400 BAD_REQUEST
