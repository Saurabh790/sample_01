import React, {
  useContext,
  useEffect,
  useMemo
} from "react";
import { Outlet } from "react-router-dom";
import { AppControllerContext } from '@optum-osgp-temp/ui-app-controller';
import { localComponentResolver } from "./utils/LocalComponentResolver";
import { PageBuilder } from "@optum-osgp-temp/ui-page-builder";
import LoadingIndicatorComp from "./components/pages/LoadingIndicatorComp";
import TopHeader from "./components/sub-components/top-header/TopHeader";
import { HeaderLogoContent } from "./components/sub-components/HeaderLogoContent";
import { store } from "@optum-osgp-temp/osgp-ui-state-management-lib";
import { ServiceConstants } from "./constants/ServiceConstants";
import { Footer } from "@optum-osgp-temp/osgp-ui-component-lib";
import { isStaticContentFlow } from './services/userService';
import './components/pages/styles.scss';
import { ACCESS_TOKEN_KEY } from "./constants/AppConstants";
import UnsecuredPageHeader from "./components/sub-components/AccountInformation/UnsecuredPageHeader/UnsecuredPageHeader";
store.set('isLoaderEnable', false);
store.set("loginHint", null);
import { FOOTER_COPYRIGHT_TEXT } from './constants/AppConstants';

function TemplateResolver() {
   /*
  * This is temporary fix to remove a dummy role from openIAM
  * TODO: Handle the logic on backend service
  *  */
   const userProfileJSON = localStorage.getItem('userProfile');
   if (userProfileJSON) {
       const userProfile = JSON.parse(userProfileJSON);
       // Define rolesToRemove as an array of strings
       const rolesToRemove: string[] = ['HIHAP Passthrough Users', 'LMS Administrator'];
       // Check if roles array exists in userProfile and remove specified roles if they exist
       if (userProfile.roles && Array.isArray(userProfile.roles)) {
           userProfile.roles = userProfile.roles.filter((role: string) => !rolesToRemove.includes(role));
       }
       // Update the userProfile in localStorage
       localStorage.setItem('userProfile', JSON.stringify(userProfile));
   }
  const json_dataInput: any = (localStorage.getItem('userProfile'));
  const userProfile = JSON.parse(json_dataInput);
  if(userProfile && userProfile.workEmail && userProfile.workEmail.length > 0) {
    store.set("loginHint", userProfile.workEmail[0]);
  }

  //TODO: Remove tempMap once all roles are supported
  const tempMap: Map<String, String> = new Map();
  tempMap.set("ExecUtilizationEnrollment", "ProgramIntegrityDirector");
  tempMap.set("TMSISScorecards", "ProgramIntegrityAnalyst");

  const appCtxValue = useContext(AppControllerContext);
  const currentPath = store.get('currentPath');
  const isLoader = store.get('isLoaderEnable');

  const initialAppControllerValue = useContext(AppControllerContext);
    const { pageBuilderConfig, pageId, templateId, pageGenericId } =
        useMemo(() => ({
            pageBuilderConfig: {
                pageTemplateConfig:{
                    ...initialAppControllerValue?.pageTemplateConfig,
                    isPlatformPage: isStaticContentFlow(currentPath) && initialAppControllerValue?.pageConfig?.page?.pageGenericId === 'StaticPages'
                },
                pageConfig: {
                  ...initialAppControllerValue?.pageConfig,
                  page: {
                    ...initialAppControllerValue?.pageConfig?.page,
                    userManageableSections: ["My Insights", "My Analytics"]

                  }

                },
            },
            pageId: initialAppControllerValue?.pageConfig?.page?.pageName,
            templateId:
                initialAppControllerValue?.pageConfig?.page?.pageTemplateId || "HorizontalTemplate",
            pageGenericId: initialAppControllerValue?.pageConfig?.page?.pageGenericId,
        }), [initialAppControllerValue, currentPath]);

  if (currentPath && (currentPath === "/" || currentPath === "")) {
    localStorage.setItem(ServiceConstants.HOME_PAGE_ID, appCtxValue?.pageConfig?.page?.pageId);
  }

    const isPlatformPage =
        useMemo(() => isStaticContentFlow(currentPath), [currentPath, pageGenericId]);

    const TemplateComponent = useMemo(() => {
        return templateId ? localComponentResolver(templateId, isPlatformPage, currentPath) : LoadingIndicatorComp;
    }, [templateId, isPlatformPage, currentPath]);

    const PageComponent = useMemo(() => {
        const finalPageId = pageGenericId ? pageGenericId : pageId;
        return finalPageId ? localComponentResolver(finalPageId, isPlatformPage, currentPath) : LoadingIndicatorComp;
    }, [pageId, pageGenericId, isPlatformPage, currentPath]);

  return (
    <div>

   

      {isLoader
        ? <LoadingIndicatorComp />
        : <PageBuilder
          key={pageGenericId}
          Page={PageComponent}
          PageTemplate={TemplateComponent}
          config={pageBuilderConfig}
          loggerApiURL={process.env.LOGGING_API_URL}
        />

      }

      {/* <hr /> */}
      <Outlet />
      {isLoader ?
        <Footer
          copyrightText={FOOTER_COPYRIGHT_TEXT}
          className="main-footer-wrapper"
        /> : null
      }
    </div>

  );
}

export default React.memo(TemplateResolver);
