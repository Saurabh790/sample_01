@Mappings({ @Mapping(source = "reportSectionId", target = "rsId"), 
			@Mapping(source = "reportSectionName", target = "reportSectionName"),
			@Mapping(source = "createdBySystemId", target = "uiUserBaseCr.uiSystemId"),
			@Mapping(source = "modifiedBySystemId", target = "uiUserBaseUpd.uiSystemId") })
	PrmRsRptSecT convertToPrmRsRptSecT(ReportSectionDTO reportSectionDTO);
public ReportSectionDTO() {};
	
	private Integer reportSectionId;
    private String reportSectionName;
    private List<ReportItemDTO> reportItems;
    private String createdBy;
    private String createdDate;
    private String modifiedBy;
    private String modifiedDate;
    private String createdBySystemId;
    private String modifiedBySystemId;
    
    public List<ReportItemDTO> getReportItems() {
        return reportItems;
    }

    public void add(ReportItemDTO reportItem) {
        if(reportItems==null){
        	reportItems=new ArrayList<>();
        }
        this.reportItems.add(reportItem);
    }

    public void setReportItems(List<ReportItemDTO> reportItems) {
        this.reportItems = reportItems;
    }


ublic class ReportItemDTO {
    private Integer reportItemId;
    private String reportItemName;
    private int calcFMT;
    private Integer multipleConstant;
    private Integer divideConstant;
    private Integer minimumDenominator;
    private List<BehaviorPatternDTO> numeratorBehaviorPatterns;
    private List<BehaviorPatternDTO> denominatorBehaviorPatterns;
	private String ratioOf;
	private Integer order;
    private String createdBy;
    private String createdDate;
    private String modifiedBy;
    private String modifiedDate; 
    private String createdBySystemId;
    private String modifiedBySystemId;   

@Mapper(unmappedTargetPolicy = ReportingPolicy.IGNORE)
