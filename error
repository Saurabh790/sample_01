025-07-07 17:16:49 [http-nio-8080-exec-8] DEBUG o.s.orm.jpa.JpaTransactionManager - Exposing JPA transaction as JDBC [org.springframework.orm.jpa.vendor.HibernateJpaDialect$HibernateConnectionHandle@47cce7d7]
2025-07-07 17:16:49 [http-nio-8080-exec-8] DEBUG o.s.orm.jpa.JpaTransactionManager - Found thread-bound EntityManager [SessionImpl(743576480<open>)] for JPA transaction
2025-07-07 17:16:49 [http-nio-8080-exec-8] DEBUG o.s.orm.jpa.JpaTransactionManager - Participating in existing transaction
2025-07-07 17:16:49 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - select prrst1_0.RS_ID,prrst1_0.CREATE_DTE,prrst1_0.RS_NAME,prrst1_0.CREATE_USR,prrst1_0.UPDATE_USR,prrst1_0.UPDATE_DTE from PRM_RS_RPT_SEC_T prrst1_0 where prrst1_0.RS_ID=?
2025-07-07 17:16:49 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - select uub1_0.UI_SYSTEM_ID,sug1_0.UI_SYSTEM_ID,sug1_0.CASE_GRP_ID,sug1_0.FADS_GRP_ID,sug1_0.SUR_GRP_ID,uub1_0.UI_CREATED_BY,uub1_0.UI_CREATED_DT,uub1_0.UI_E_MAIL_ADDRESS,uub1_0.UI_FIRST_NAME,uub1_0.UI_LAST_NAME,uub1_0.UI_PHONE,uub1_0.UI_TERMINATED_BY,uub1_0.UI_TERMINATED_DT,uub1_0.UI_TITLE,uub1_0.UI_USER_ID,uub1_0.UI_USER_INACTIVE,uub1_0.UI_FIRST_NAME || ' ' || uub1_0.UI_LAST_NAME from UI_USER_BASE uub1_0 left join SE_USR_GRP sug1_0 on uub1_0.UI_SYSTEM_ID=sug1_0.UI_SYSTEM_ID where uub1_0.UI_SYSTEM_ID=?
2025-07-07 17:16:49 [http-nio-8080-exec-8] DEBUG o.s.orm.jpa.JpaTransactionManager - Found thread-bound EntityManager [SessionImpl(743576480<open>)] for JPA transaction
2025-07-07 17:16:49 [http-nio-8080-exec-8] DEBUG o.s.orm.jpa.JpaTransactionManager - Participating in existing transaction
2025-07-07 17:16:49 [http-nio-8080-exec-8] DEBUG o.s.orm.jpa.JpaTransactionManager - Participating transaction failed - marking existing transaction as rollback-only
2025-07-07 17:16:49 [http-nio-8080-exec-8] DEBUG o.s.orm.jpa.JpaTransactionManager - Setting JPA transaction on EntityManager [SessionImpl(743576480<open>)] rollback-only
2025-07-07 17:16:49 [http-nio-8080-exec-8] DEBUG o.s.orm.jpa.JpaTransactionManager - Initiating transaction rollback
2025-07-07 17:16:49 [http-nio-8080-exec-8] DEBUG o.s.orm.jpa.JpaTransactionManager - Rolling back JPA transaction on EntityManager [SessionImpl(743576480<open>)]
2025-07-07 17:16:49 [http-nio-8080-exec-8] DEBUG o.s.orm.jpa.JpaTransactionManager - Not closing pre-bound JPA EntityManager after transaction
2025-07-07 17:16:49 [http-nio-8080-exec-8] ERROR c.o.f.p.r.a.c.ReportSectionController - Exception occured 
2025-07-07 17:16:49 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [application/json] and supported [text/plain, */*, application/json, application/*+json]
2025-07-07 17:16:49 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing ["Exception occured "]
2025-07-07 17:16:49 [http-nio-8080-exec-8] DEBUG o.s.o.j.s.OpenEntityManagerInViewInterceptor - Closing JPA EntityManager in OpenEntityManagerInViewInterceptor
2025-07-07 17:16:49 [http-nio-8080-exec-8] DEBUG o.s.web.servlet.DispatcherServlet - Completed 400 BAD_REQUEST

@PutMapping(value = { "/updatereportsection/{reportSectionId}" })
	public ResponseEntity<String> updateReportSection(@PathVariable Integer reportSectionId, @RequestBody ReportSectionDTO reportSectionDTO) {
		String updReportSectionMessage;
		String userAccess = "";
		boolean userHasAccess = false;
		try {
			DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(ReportSectionConstants.DATE_FORMAT_MMDDYYYY_HHMMSS_A,
					Locale.ENGLISH);
			Authentication auth =  SecurityContextHolder.getContext().getAuthentication();
			if (auth != null) {
				AppUser user = (AppUser) auth.getPrincipal();
				reportSectionDTO.setModifiedBySystemId(user.getUserSystemId());
				List<com.optum.fads.authorization.api.dto.AccessLevel> userAccessLevels = user.getRole().getAllowedAccesses();
				for (com.optum.fads.authorization.api.dto.AccessLevel userAccessLevel : userAccessLevels) {
					if (userAccessLevel.getModuleCode().equals("STUDY")) {
						userAccess = userAccessLevel.getAccess();
						break;
					}
				}
				if (userAccess.equals("A") || 
						(userAccess.equals("B") && reportSectionDTO.getCreatedBySystemId().equals(user.getUserSystemId()))) {
					userHasAccess = true;
				}
			}
			if (userHasAccess) {
				LocalDateTime currentLocalDate = LocalDateTime.now(iReportSectionDataService.getZoneId());
				reportSectionDTO.setModifiedDate(dateTimeFormatter.format(currentLocalDate));
				updReportSectionMessage = iReportSectionDataService.updateReportSection(reportSectionId, reportSectionDTO);
				return ResponseEntity.status(HttpStatus.OK).body(updReportSectionMessage);
			} else {
				return new ResponseEntity<String>(ReportSectionConstants.NOT_AUTHORIZED, HttpStatus.FORBIDDEN);
			}
				
		} catch (ReportSectionApiException ex) {
			logit.error(ReportSectionConstants.EXCEPTION_MESSAGE, ex.getMessage());
			return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(ReportSectionConstants.EXCEPTION_MESSAGE);
		}
		
	}
