package com.optum.fads.pgp.studygroup.api.repo;

import java.util.List;

import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Modifying;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

import com.optum.fads.pgp.datarules.domain.PrmPgPeerGroupT;
import com.optum.fads.pgp.datarules.domain.PrmStudyMasterT;

@Transactional
@Repository
public interface StudyGroupsRepository extends  JpaRepository <PrmPgPeerGroupT, Integer>{
		
	@Query(" FROM PrmPgPeerGroupT pg  where pg.cgId = :cgId ")
	PrmPgPeerGroupT getStudyGroupsById(@Param("cgId") Integer cgId );
	
	@Query(" FROM PrmPgPeerGroupT pg  where lower(pg.studyGroupName) = :studyGroupName ")
	PrmPgPeerGroupT getStudyGroupByName(@Param("studyGroupName") String studyGroupName );
	
	@Query("SELECT MAX(cgId)+1 FROM PrmPgPeerGroupT")
	Integer retrieveNextStudyGroupId();
	
	@Query(" FROM PrmPgPeerGroupT pg" )
	List<PrmPgPeerGroupT> getStudyGroups(Pageable pageRequest );
	
	@Query(" FROM  PrmPgPeerGroupT pg  where lower(pg.studyGroupName) like :studyGroupName "
			+ "and (lower(pg.uiUserBaseCr.userFullName) like :createdBy or lower(pg.uiUserBaseCr.uiLastName) like :createdBy) "
			+ "and (lower(pg.uiUserBaseUpd.userFullName) like :updatedBy or lower(pg.uiUserBaseUpd.uiLastName) like :updatedBy)" )
	List<PrmPgPeerGroupT> getStudyGroupsBySearchCrit(@Param("studyGroupName") String studyGroupName, 
			@Param("createdBy") String createdBy, @Param("updatedBy") String updatedBy, Pageable pageRequest );
	
	// My items
	
	@Query(" FROM  PrmPgPeerGroupT pg  where lower(pg.studyGroupName) like :studyGroupName "
			+ "and (lower(pg.uiUserBaseCr.userFullName) like :createdBy or lower(pg.uiUserBaseCr.uiLastName) like :createdBy) "
			+ "and (lower(pg.uiUserBaseUpd.userFullName) like :updatedBy or lower(pg.uiUserBaseUpd.uiLastName) like :updatedBy) "  
			+ "and (lower(pg.uiUserBaseCr.uiSystemId) = :userSystemId or lower(pg.uiUserBaseUpd.uiSystemId) = :userSystemId)")
	List<PrmPgPeerGroupT> getMyStudyGroupsBySearchCrit(@Param("studyGroupName") String studyGroupName, 
			@Param("createdBy") String createdBy, @Param("updatedBy") String updatedBy, @Param("userSystemId") String userSystemId,
			Pageable pageRequest );
	
	// Query for special character in the Study Group Name
	
	@Query(" FROM  PrmPgPeerGroupT pg  where lower(pg.studyGroupName) like :studyGroupName ESCAPE '\\' "
			+ "and (lower(pg.uiUserBaseCr.userFullName) like :createdBy or lower(pg.uiUserBaseCr.uiLastName) like :createdBy) "
			+ "and (lower(pg.uiUserBaseUpd.userFullName) like :updatedBy or lower(pg.uiUserBaseUpd.uiLastName) like :updatedBy)" )
	List<PrmPgPeerGroupT> getStudyGroupsBySearchCritEsc(@Param("studyGroupName") String studyGroupName, 
			@Param("createdBy") String createdBy, @Param("updatedBy") String updatedBy, Pageable pageRequest );
	
	// My Items Query for special character in the Study Group Name
	
	@Query(" FROM  PrmPgPeerGroupT pg  where lower(pg.studyGroupName) like :studyGroupName ESCAPE '\\' "
			+ "and (lower(pg.uiUserBaseCr.userFullName) like :createdBy or lower(pg.uiUserBaseCr.uiLastName) like :createdBy) "
			+ "and (lower(pg.uiUserBaseUpd.userFullName) like :updatedBy or lower(pg.uiUserBaseUpd.uiLastName) like :updatedBy) "  
			+ "and (lower(pg.uiUserBaseCr.uiSystemId) = :userSystemId or lower(pg.uiUserBaseUpd.uiSystemId) = :userSystemId)")
	List<PrmPgPeerGroupT> getMyStudyGroupsBySearchCritEsc(@Param("studyGroupName") String studyGroupName, 
			@Param("createdBy") String createdBy, @Param("updatedBy") String updatedBy, @Param("userSystemId") String userSystemId,
			Pageable pageRequest );
	
	@Modifying
	@Query("DELETE FROM PrmPgPeerGroupT pg  WHERE pg.cgId = :cgId") 
	int deleteStudyGroup(@Param("cgId") Integer  cgId  );
	
	@Query(" FROM PrmPgPeerGroupT pg WHERE pg.cgId = :cgId") 
	PrmPgPeerGroupT getStudyGroupById(@Param("cgId") Integer cgId);
	
	@Query(" FROM PrmPgPeerGroupT pg WHERE pg.cgId IN :cgIds") 
	List<PrmPgPeerGroupT> getStudyGroupsByIds(@Param("cgIds") List<Integer> cgIds);
	
	@Query(" FROM PrmStudyMasterT st  where st.prmPgPeerGroupT.cgId = :cgId ")
	List<PrmStudyMasterT> getStudysByCgId(@Param("cgId") Integer cgId );
	
	@Query(" FROM PrmStudyMasterT st  where st.pbId = :studyId ")
	PrmStudyMasterT getStudyById(@Param("studyId") Integer studyId );
	
}



package com.optum.fads.pgp.studygroup.api.repo;

import java.util.List;
import java.util.Optional;

import jakarta.persistence.LockModeType;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Lock;
import org.springframework.data.jpa.repository.Modifying;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

import com.optum.fads.pgp.datarules.domain.PrmPgForcedPartT;
import com.optum.fads.pgp.datarules.domain.PrmPgForcedPartTPK;

@Transactional
@Repository
public interface StudyGroupFpRepository extends  JpaRepository <PrmPgForcedPartT, PrmPgForcedPartTPK>{
	@Lock(value = LockModeType.OPTIMISTIC)
	  Optional<PrmPgForcedPartT> findById(PrmPgForcedPartTPK id);
		
	@Query(" FROM PrmPgForcedPartT pgfp  where pgfp.id.cgId = :studyGroupId order by pgfp.id.participantId")
	List<PrmPgForcedPartT> getPgFpsById(@Param("studyGroupId") Integer studyGroupId );
	
	@Modifying
	@Query("DELETE FROM PrmPgForcedPartT pgfp  WHERE pgfp.id.cgId IN :studyGroupIds") 
	int deletePgFps(@Param("studyGroupIds") List<Integer>  studyGroupIds  );
	
	@Modifying
	@Query("DELETE FROM PrmPgForcedPartT pgfp  WHERE pgfp.id.cgId = :studyGroupId") 
	int deletePgFpsByCgId(@Param("studyGroupId") Integer  studyGroupId  );
}


package com.optum.fads.pgp.studygroup.api.repo;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Modifying;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

import com.optum.fads.pgp.datarules.domain.PrmDrDataRuleT;
import com.optum.fads.pgp.datarules.domain.PrmPgDrT;
import com.optum.fads.pgp.datarules.domain.PrmPgDrTPK;

@Transactional
@Repository
public interface StudyGroupDrRepository extends  JpaRepository <PrmPgDrT, PrmPgDrTPK>{
		
	@Query(" FROM PrmPgDrT pgdr  where pgdr.id.cgId = :studyGroupId order by pgdr.id.drId")
	List<PrmPgDrT> getPgDrsById(@Param("studyGroupId") Integer studyGroupId );
	/*
	@Modifying
	@Query("DELETE FROM PrmPgDrT pgdr  WHERE pgdr.id.cgId = :studyGroupId") 
	int deletePgDrs(@Param("studyGroupId") Integer  studyGroupId  );
	*/
	@Modifying
	@Query("DELETE FROM PrmPgDrT pgdr  WHERE pgdr.id.cgId = :studyGroupId") 
	int deletePgDrsByCgId(@Param("studyGroupId") Integer  studyGroupId  );
		
	@Query(" FROM PrmDrDataRuleT dr  where dr.drId in :dataRuleIds order by dr.drId")
	List<PrmDrDataRuleT> getDataRulesByIds(@Param("dataRuleIds") List<Integer> dataRuleIds );
	
	@Query(" FROM PrmDrDataRuleT dr WHERE dr.drId not in "
			+ "(Select pgdr.id.drId FROM PrmPgDrT pgdr  WHERE pgdr.id.cgId = :studyGroupId) order by dr.drId")
	List<PrmDrDataRuleT> getAvailableDataRules(@Param("studyGroupId") Integer studyGroupId);
}


package com.optum.fads.pgp.studygroup.api.repo;

import com.optum.fads.pgp.datarules.domain.CgLuValuesT;
import com.optum.fads.pgp.datarules.domain.PrmPgDrT;
import com.optum.fads.pgp.datarules.domain.PrmPgDrTPK;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

@Transactional
@Repository
public interface CgLuValuesRepo  extends JpaRepository<CgLuValuesT, String> {
}
