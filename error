@Test
void getReportItems_NoSelectedItems_NoEscapeChar_AllItems() {
    ListTableParams params = new ListTableParams();
    params.setSearchBy(List.of("createdBy"));
    params.setSelectedItemIds(Collections.emptyList());

    Pageable pageable = PageRequest.of(0, 10);
    List<PrmRiRptItemT> dummyEntities = List.of(new PrmRiRptItemT());
    List<ReportItemDTO> dummyDtos = List.of(new ReportItemDTO());

    // Simulate no escape char
    String[] criteria = new String[]{"name", "createdBy", "updatedBy", "NORMAL", "userId"};

    // Stub the helper methods
    ReportItemService spyService = Mockito.spy(reportItemService);
    doReturn(pageable).when(spyService).createPageableReports(params);
    doReturn(criteria).when(spyService).getSearchCriteria(params, -1);
    doReturn(dummyDtos).when(spyService).populateReportItemList(dummyEntities);

    when(reportItemsRepository.getReportItemsBySearchCrit("name", "createdBy", "updatedBy", pageable))
        .thenReturn(dummyEntities);
    when(reportItemsRepository.getReportItemsBySearchCrit("name", "createdBy", "updatedBy", null))
        .thenReturn(dummyEntities);

    PaginationResultRI result = spyService.getReportItemsOnSearchCriteria(params);

    assertEquals(1, result.getTotalRecordsCount());
    assertEquals(1, result.getReportItemsData().size());
}


@Test
void getReportItems_SelectedItems_EscapeChar_MyItemsOnly() {
    ListTableParams params = new ListTableParams();
    params.setSearchBy(List.of(ReportSectionConstants.USER_SYSTEM_ID));
    params.setSelectedItemIds(List.of(1, 2, 3));

    Pageable pageable = PageRequest.of(0, 10);
    List<PrmRiRptItemT> dummyEntities = List.of(new PrmRiRptItemT());
    List<ReportItemDTO> dummyDtos = List.of(new ReportItemDTO());

    String[] criteria = new String[]{"name", "createdBy", "updatedBy", ReportSectionConstants.SEARCH_SP_CH_IN_NM_STR, "user123"};

    ReportItemService spyService = Mockito.spy(reportItemService);
    doReturn(pageable).when(spyService).createPageableReports(params);
    doReturn(criteria).when(spyService).getSearchCriteria(params, 0);
    doReturn(dummyDtos).when(spyService).populateReportItemList(dummyEntities);

    when(reportItemsRepository.getMyAvailableReportItemsBySearchCritEsc("name", "createdBy", "updatedBy", "user123", List.of(1,2,3), pageable))
        .thenReturn(dummyEntities);
    when(reportItemsRepository.getMyAvailableReportItemsBySearchCritEsc("name", "createdBy", "updatedBy", "user123", List.of(1,2,3), null))
        .thenReturn(dummyEntities);

    PaginationResultRI result = spyService.getReportItemsOnSearchCriteria(params);

    assertEquals(1, result.getTotalRecordsCount());
    assertEquals(1, result.getReportItemsData().size());
}


@Test
void getReportItems_NoResults_ReturnsEmptyPagination() {
    ListTableParams params = new ListTableParams();
    params.setSearchBy(List.of("dummy"));
    params.setSelectedItemIds(Collections.emptyList());

    Pageable pageable = PageRequest.of(0, 10);
    String[] criteria = new String[]{"name", "createdBy", "updatedBy", "NORMAL", "userId"};

    ReportItemService spyService = Mockito.spy(reportItemService);
    doReturn(pageable).when(spyService).createPageableReports(params);
    doReturn(criteria).when(spyService).getSearchCriteria(params, -1);

    when(reportItemsRepository.getReportItemsBySearchCrit("name", "createdBy", "updatedBy", pageable))
        .thenReturn(Collections.emptyList());
    when(reportItemsRepository.getReportItemsBySearchCrit("name", "createdBy", "updatedBy", null))
        .thenReturn(Collections.emptyList());

    PaginationResultRI result = spyService.getReportItemsOnSearchCriteria(params);

    assertEquals(0, result.getTotalRecordsCount());
    assertTrue(result.getReportItemsData().isEmpty());
}

@ExtendWith(MockitoExtension.class)
class ReportItemServiceTest {

    @InjectMocks
    private ReportItemService reportItemService;

    @Mock
    private ReportItemsRepository reportItemsRepository;

    @BeforeEach
    void init() {
        SecurityContextHolder.clearContext();
    }
}

