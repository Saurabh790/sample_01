@Test
public void testUpdateReportItem_SuccessAccessLevelA() {
    Integer reportItemId = 1010;
    String userSystemId = "USER123";
    ReportItemDTO reportItemDTO = new ReportItemDTO();
    reportItemDTO.setCreatedBySystemId("ANYUSER"); // irrelevant for AccessLevel A

    // Mock AppUser and AccessLevel
    AccessLevel accessLevel = new AccessLevel();
    accessLevel.setModuleCode("STUDY");
    accessLevel.setAccess("A");

    AppUser mockUser = new AppUser();
    mockUser.setUserSystemId(userSystemId);
    mockUser.setRole(new com.optum.fads.pgp.reportsection.api.dto.Role());
    mockUser.getRole().setAllowedAccesses(Arrays.asList(accessLevel));

    Authentication mockAuth = org.mockito.Mockito.mock(Authentication.class);
    when(mockAuth.getPrincipal()).thenReturn(mockUser);

    SecurityContext mockContext = org.mockito.Mockito.mock(SecurityContext.class);
    when(mockContext.getAuthentication()).thenReturn(mockAuth);
    SecurityContextHolder.setContext(mockContext);

    doReturn(ZoneId.systemDefault()).when(reportItemDataService).getZoneId();
    doReturn(ReportSectionConstants.UPDATE_REPORT_ITEM_SUCCESS)
        .when(reportItemDataService).updateReportItem(eq(reportItemId), any(ReportItemDTO.class));

    ResponseEntity<String> response = reportItemController.updateReportItem(reportItemId, reportItemDTO);

    assertNotNull(response);
    assertEquals(HttpStatus.OK, response.getStatusCode());
    assertEquals(ReportSectionConstants.UPDATE_REPORT_ITEM_SUCCESS, response.getBody());
}


@Test
public void testUpdateReportItem_SuccessAccessLevelB_MatchingCreator() {
    Integer reportItemId = 1011;
    String userSystemId = "USER123";
    ReportItemDTO reportItemDTO = new ReportItemDTO();
    reportItemDTO.setCreatedBySystemId(userSystemId);

    AccessLevel accessLevel = new AccessLevel();
    accessLevel.setModuleCode("STUDY");
    accessLevel.setAccess("B");

    AppUser mockUser = new AppUser();
    mockUser.setUserSystemId(userSystemId);
    mockUser.setRole(new com.optum.fads.pgp.reportsection.api.dto.Role());
    mockUser.getRole().setAllowedAccesses(Arrays.asList(accessLevel));

    Authentication mockAuth = org.mockito.Mockito.mock(Authentication.class);
    when(mockAuth.getPrincipal()).thenReturn(mockUser);

    SecurityContext mockContext = org.mockito.Mockito.mock(SecurityContext.class);
    when(mockContext.getAuthentication()).thenReturn(mockAuth);
    SecurityContextHolder.setContext(mockContext);

    doReturn(ZoneId.systemDefault()).when(reportItemDataService).getZoneId();
    doReturn(ReportSectionConstants.UPDATE_REPORT_ITEM_SUCCESS)
        .when(reportItemDataService).updateReportItem(eq(reportItemId), any(ReportItemDTO.class));

    ResponseEntity<String> response = reportItemController.updateReportItem(reportItemId, reportItemDTO);

    assertNotNull(response);
    assertEquals(HttpStatus.OK, response.getStatusCode());
    assertEquals(ReportSectionConstants.UPDATE_REPORT_ITEM_SUCCESS, response.getBody());
}


@Test
public void testUpdateReportItem_ForbiddenAccessLevelB_NonMatchingCreator() {
    Integer reportItemId = 1012;
    String userSystemId = "USER123";
    ReportItemDTO reportItemDTO = new ReportItemDTO();
    reportItemDTO.setCreatedBySystemId("OTHERUSER"); // mismatch

    AccessLevel accessLevel = new AccessLevel();
    accessLevel.setModuleCode("STUDY");
    accessLevel.setAccess("B");

    AppUser mockUser = new AppUser();
    mockUser.setUserSystemId(userSystemId);
    mockUser.setRole(new com.optum.fads.pgp.reportsection.api.dto.Role());
    mockUser.getRole().setAllowedAccesses(Arrays.asList(accessLevel));

    Authentication mockAuth = org.mockito.Mockito.mock(Authentication.class);
    when(mockAuth.getPrincipal()).thenReturn(mockUser);

    SecurityContext mockContext = org.mockito.Mockito.mock(SecurityContext.class);
    when(mockContext.getAuthentication()).thenReturn(mockAuth);
    SecurityContextHolder.setContext(mockContext);

    ResponseEntity<String> response = reportItemController.updateReportItem(reportItemId, reportItemDTO);

    assertNotNull(response);
    assertEquals(HttpStatus.FORBIDDEN, response.getStatusCode());
    assertEquals(ReportSectionConstants.NOT_AUTHORIZED, response.getBody());
}


@Test
public void testUpdateReportItem_ServiceThrowsException() {
    Integer reportItemId = 1013;
    String userSystemId = "USER123";
    ReportItemDTO reportItemDTO = new ReportItemDTO();
    reportItemDTO.setCreatedBySystemId(userSystemId);

    AccessLevel accessLevel = new AccessLevel();
    accessLevel.setModuleCode("STUDY");
    accessLevel.setAccess("A");

    AppUser mockUser = new AppUser();
    mockUser.setUserSystemId(userSystemId);
    mockUser.setRole(new com.optum.fads.pgp.reportsection.api.dto.Role());
    mockUser.getRole().setAllowedAccesses(Arrays.asList(accessLevel));

    Authentication mockAuth = org.mockito.Mockito.mock(Authentication.class);
    when(mockAuth.getPrincipal()).thenReturn(mockUser);

    SecurityContext mockContext = org.mockito.Mockito.mock(SecurityContext.class);
    when(mockContext.getAuthentication()).thenReturn(mockAuth);
    SecurityContextHolder.setContext(mockContext);

    doReturn(ZoneId.systemDefault()).when(reportItemDataService).getZoneId();
    when(reportItemDataService.updateReportItem(eq(reportItemId), any(ReportItemDTO.class)))
        .thenThrow(new com.optum.fads.pgp.reportsection.api.exception.ReportSectionApiException("Failed update"));

    ResponseEntity<String> response = reportItemController.updateReportItem(reportItemId, reportItemDTO);

    assertNotNull(response);
    assertEquals(HttpStatus.BAD_REQUEST, response.getStatusCode());
    assertEquals(ReportSectionConstants.EXCEPTION_MESSAGE, response.getBody());
}

