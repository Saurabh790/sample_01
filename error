/*
//***********************************************
// Copyright UNITEDHEALTH GROUP CORPORATION 2018.
// This software and documentation contain confidential and
// proprietary information owned by UnitedHealth Group Corporation.
// Unauthorized use and distribution are prohibited.
//***********************************************
*/
/** 
 *  The service contains methods to retrieve and update FADS Data Element data.
 * 
 * @author Anil Wagh
 */
package com.optum.fads.pgp.datarules.service.impl;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Service;

import com.optum.fads.pgp.datarules.common.constants.DataRuleConstants;
import com.optum.fads.pgp.datarules.domain.FadsLuValuesT;
import com.optum.fads.pgp.datarules.domain.PrmMbMasterT;
import com.optum.fads.pgp.datarules.dto.DataElementDTO;
import com.optum.fads.pgp.datarules.dto.DrCodeValueDTO;
import com.optum.fads.pgp.datarules.dto.LUValueDTO;
import com.optum.fads.pgp.datarules.exception.DataRulesApiException;
import com.optum.fads.pgp.datarules.repo.DataRuleMBRepository;
import com.optum.fads.pgp.datarules.service.IDataElementDataService;

@Service("dataElementDataService")
//@Slf4j
public class DataElementDataService implements IDataElementDataService  {

	private static final Logger logit = LoggerFactory
			.getLogger(DataElementDataService.class);
	
	@Autowired
    private DataRuleMBRepository dataRuleMBRepository;
    @Autowired
    private JdbcTemplate jdbcTemplate;


	/**
	 * this method will get the data element record data corresponding to Data Element ID  
	 * 
	 * Parameters - Data Element ID, selectedItemCds - code values not to be included
	 */
	 public DataElementDTO getdataelement(Integer dataElementId, List <String> selectedItemCds){
			logit.info(" Obtain data element ID = {}", dataElementId );
			List<Object[]> dataElementRS;
			DataElementDTO dataElementDTO = null;
			try {
				dataElementRS = dataRuleMBRepository.retrieveDataElementById(dataElementId);
				List<DataElementDTO> dataElementList = populateDataElementList(dataElementRS);
				if (!dataElementList.isEmpty()) {
					dataElementDTO = dataElementList.get(0);
					if(dataElementDTO.getLuFlag()!=null && !dataElementDTO.getLuFlag().equals("0")) {
						dataElementDTO.setAvailValues(getAvailableValues(dataElementDTO, selectedItemCds));
					}     	
				}
			} catch (Exception e) {
				throw new DataRulesApiException(DataRuleConstants.EXCEPTION_MESSAGE, e);
			} 
	        return dataElementDTO;
		}
	 /**
	 * this method is called by findDataElementId routine, it fetches the available values 
	 * 	corresponding to a selected data element (MB_LU_SQL from MB table provides these values)
	 * 
	 * When mbCtecFType is char and mbLuSql has SQL the valid values/Lu Values can be obtained from the SQL
	 * 		The available values are stored in Data Element Bean rather than Data Rule Bean
	 * Else to and from range values can be provided by the User
	 * 
	 * Parameters - None
	 */
	/* public List<DrCodeValueDTO>  getAvailableValues(DataElementDTO dataElementDTO, List <String> selectedItemCds ){
		 logit.info(" Obtain avail values for Data ElementID {} ", dataElementDTO.getId()  );
		int startQuotePos = dataElementDTO.getValueSQL().indexOf('\'');
		int endQuotePos = dataElementDTO.getValueSQL().lastIndexOf('\'');
		String valueId = dataElementDTO.getValueSQL().substring(startQuotePos+1,endQuotePos);
		List<DmValidValueT> dmValidValueList = null;
		List<DrCodeValueDTO> codeValueList = new ArrayList<>();

		logit.info("DM Value ID parm = {} ", valueId );
		if (selectedItemCds.isEmpty()) {
			dmValidValueList =  dataRuleMBRepository.retrieveValidValuesById(valueId );
		} else {
			dmValidValueList =  dataRuleMBRepository.retrieveAvailableValidValuesById(valueId, selectedItemCds );
		}
		for (DmValidValueT dmValidValue : dmValidValueList) {
            DrCodeValueDTO codeValue = new DrCodeValueDTO();
            codeValue.setCode(dmValidValue.getId().getrVvCd());
            codeValue.setValue(dmValidValue.getrVvShortDescr());
            codeValueList.add(codeValue);
        }	
		return codeValueList;
	}
*/

    public List<DrCodeValueDTO>  getAvailableValues(DataElementDTO dataElementDTO, List <String> selectedItemCds ){
        logit.info(" Obtain avail values for Data ElementID {} ", dataElementDTO.getId()  );
       String sql = dataElementDTO.getValueSQL();
        List<DrCodeValueDTO> codeValueList = new ArrayList<>();
        List<Map<String, Object>> rows = jdbcTemplate.queryForList(sql);

        for (Map row : rows) {
            DrCodeValueDTO obj = new DrCodeValueDTO();
            obj.setCode(((String) row.get("DATA_VALUE")));
            obj.setValue((String) row.get("DATA_LABEL"));

            codeValueList.add(obj);
        }

        return codeValueList;
    }
    /**
		 * this method fetches all the data element records from PrmMbMasterT (FadsLuValuesT)
		 * 
		 * Parameters - data source (All, Provider, Claim, Member - LU_LABEL in FADS_LU_VALUES_T for FIELD_ID =  DR_ELEMENT_CLASS)
		 */
	 
	 public List<DataElementDTO> getDataElements(String dataSource){

			List<DataElementDTO> dataElementList;
			List<Object[]>  dataElementRS;
			try {
				if (dataSource.equalsIgnoreCase(DataRuleConstants.ALL_STR)) {
					dataElementRS = dataRuleMBRepository.retrieveDataElements();
				} else {
					dataElementRS = dataRuleMBRepository.retrieveDataElementsByDataSource(dataSource);
				}
				if (dataElementRS.isEmpty()) {
					throw new DataRulesApiException(DataRuleConstants.NO_DATA_FOUND_MSG);
				}
				dataElementList = populateDataElementList(dataElementRS);
			} catch (Exception e) {
				throw new DataRulesApiException(DataRuleConstants.EXCEPTION_MESSAGE, e);
			} 
	        return dataElementList;
		}
	
	private List<DataElementDTO> populateDataElementList(List<Object[]> dataElementRS) {
		 List<DataElementDTO> dataElementDataList = new ArrayList<>(); 
			if (!dataElementRS.isEmpty()) {
				for (Object[] dataElementData : dataElementRS) {	
					DataElementDTO dataElementDTO = new DataElementDTO();
					dataElementDTO.setId((int)dataElementData[0]); //mbCtecFid
					dataElementDTO.setName((String)dataElementData[1]); //mbCustDatadesc
					dataElementDTO.setDataType((String)dataElementData[2]); //mbCtecFtype
					dataElementDTO.setLuFlag(String.valueOf(dataElementData[3])); //mbLuFlag
					dataElementDTO.setValueSQL((String)dataElementData[4]); //mbLuSql
					dataElementDTO.setDataSource((String)dataElementData[5]); //luLabel
					dataElementDTO.setAvailValues(new ArrayList<>());
					dataElementDataList.add(dataElementDTO);
				}  
	       } else {
	    	   throw new DataRulesApiException(DataRuleConstants.NO_DATA_FOUND_MSG);
			}
		 return dataElementDataList;
	 }
	/**
	 * this method fetches data element records from PrmMbMasterT corresponding to BA_ID in a Behavior Pattern 
	 * 
	 * Parameters - BA_ID
	 */
 
 public List<DataElementDTO> getBpTypeDataElements(String baId){

		List<DataElementDTO> dataElementList;
		List<PrmMbMasterT>  dataElementsRS;
		String baIdLk = DataRuleConstants.PERCENT_STR + baId + DataRuleConstants.PERCENT_STR;
		try {
			
			dataElementsRS = dataRuleMBRepository.retrieveBpTypeDataElements(baIdLk);
			if (dataElementsRS.isEmpty()) {
				throw new DataRulesApiException(DataRuleConstants.NO_DATA_FOUND_MSG);
			}
			dataElementList = populateBpDataElementList(dataElementsRS);
		} catch (Exception e) {
			throw new DataRulesApiException(DataRuleConstants.EXCEPTION_MESSAGE, e);
		} 
        return dataElementList;
	}
 
 private List<DataElementDTO> populateBpDataElementList(List<PrmMbMasterT> dataElementsRS) {
	 List<DataElementDTO> dataElementDataList = new ArrayList<>(); 
		if (!dataElementsRS.isEmpty()) {
			for (PrmMbMasterT dataElementData : dataElementsRS) {	
				DataElementDTO dataElementDTO = new DataElementDTO();
				dataElementDTO.setId(dataElementData.getMbCtecFid()); // ID
				dataElementDTO.setName(dataElementData.getMbCustDatadesc()); 
				dataElementDataList.add(dataElementDTO);
			}  
       } else {
    	   throw new DataRulesApiException(DataRuleConstants.NO_DATA_FOUND_MSG);
		}
	 return dataElementDataList;
 }
	/**
	 * this method fetches all the data source element records (field ID = DR_ELEMENT_CLASS)  
	 * 
	 * Parameters - None
	 */
	public List<LUValueDTO> findAllDataSourceElements() {
		 logit.info(" Obtain all data sources " );
		 List<LUValueDTO> luValueList = new ArrayList<>();
        try {
       	 List<FadsLuValuesT> fadsLuValuesList = dataRuleMBRepository.retrieveDataSourceElements();
            for(FadsLuValuesT fadsLuValue : fadsLuValuesList) {
           	 LUValueDTO luv = new LUValueDTO();
           	 if(DataRuleConstants.ZERO_STR.equals(fadsLuValue.getId().getLuValue())) {
           		 luv.setLuValue("All");
           		 luv.setLuLabel("All");
           	 } else {
           		 luv.setLuValue(fadsLuValue.getId().getLuValue());
           		 luv.setLuLabel(fadsLuValue.getLuLabel());
           	 }
           	 luv.setFieldID(fadsLuValue.getId().getFieldId());
           	 luv.setLuView(fadsLuValue.getLuView());
           	 luv.setObjID(String.valueOf(fadsLuValue.getObjId()));
           	 luv.setLuSeq(String.valueOf(fadsLuValue.getLuSeq()));
                luValueList.add(luv);
            }
        }catch (Exception e) {
				throw new DataRulesApiException(DataRuleConstants.EXCEPTION_MESSAGE, e);
        }
        return luValueList;
    }
	/**
	 * this method fetches all the date elements 
	 * 
	 * Parameters - None
	 */
	public List<DataElementDTO> getAllDateElements() {
		 logit.info(" Obtain the date elements " );
		 List<DataElementDTO> dateElementsList;
		 List<PrmMbMasterT>  dateElementsRS;
		 String mbBpTypeLk = "%5%";
       try {
    	   dateElementsRS = dataRuleMBRepository.retrieveDateElements(mbBpTypeLk);
    	   if (dateElementsRS.isEmpty()) {
				throw new DataRulesApiException(DataRuleConstants.NO_DATA_FOUND_MSG);
			}
    	   dateElementsList = populateBpDataElementList(dateElementsRS);
       }catch (Exception e) {
				throw new DataRulesApiException(DataRuleConstants.EXCEPTION_MESSAGE, e);
       }
       return dateElementsList;
   }
}

package com.optum.fads.pgp.datarules.repo;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

import com.optum.fads.pgp.datarules.domain.FadsLuValuesT;
import com.optum.fads.pgp.datarules.domain.PrmMbMasterT;

@Transactional
@Repository
public interface DataRuleMBRepository extends  JpaRepository <PrmMbMasterT, Integer>{
		
	@Query("SELECT p.mbCtecFid,p.mbCustDatadesc,p.mbCtecFtype,p.mbLuFlag,p.mbLuSql,f.luLabel  "
			+ "FROM PrmMbMasterT p, FadsLuValuesT f WHERE p.drElementClass In (1,2,3,4) "
			+ " AND p.mbCustFlag=1 AND Cast(p.drElementClass as text)=f.id.luValue AND f.id.fieldId = 'DR_ELEMENT_CLASS'"
			+ " ORDER BY p.mbCustDatadesc ")
	List<Object[]> retrieveDataElements();
	
	@Query("SELECT p.mbCtecFid,p.mbCustDatadesc,p.mbCtecFtype,p.mbLuFlag,p.mbLuSql,f.luLabel  "
			+ "FROM PrmMbMasterT p, FadsLuValuesT f WHERE p.drElementClass In (1,2,3,4) "
			+ " AND p.mbCustFlag=1 AND Cast(p.drElementClass as text)=f.id.luValue AND f.id.fieldId = 'DR_ELEMENT_CLASS'"
			+ " AND f.luLabel = :dataSource ORDER BY p.mbCustDatadesc ")
	List<Object[]> retrieveDataElementsByDataSource(@Param("dataSource") String dataSource);
	
	@Query("SELECT p.mbCtecFid,p.mbCustDatadesc,p.mbCtecFtype,p.mbLuFlag,p.mbLuSql,f.luLabel  "
			+ "FROM PrmMbMasterT p, FadsLuValuesT f WHERE Cast(p.drElementClass as text)=f.id.luValue"
			+ " AND f.id.fieldId = 'DR_ELEMENT_CLASS' AND p.mbCtecFid = :dataElementId")
	List<Object[]> retrieveDataElementById(@Param("dataElementId") Integer dataElementId);
	
	@Query(" FROM FadsLuValuesT fl  where fl.id.fieldId = 'DR_ELEMENT_CLASS' and fl.luView='1' Order by fl.luSeq")
	List<FadsLuValuesT>	retrieveDataSourceElements();
	/*
	@Query(" FROM DmValidValueT dv  WHERE dv.id.rVvId = :validValueId ORDER BY dv.id.rVvCd")
	List<DmValidValueT> retrieveValidValuesById(@Param("validValueId") String validValueId );
	
	@Query(" FROM DmValidValueT dv  WHERE dv.id.rVvId = :validValueId AND "
			+ "dv.id.rVvCd NOT IN :selectedItemCds ORDER BY dv.id.rVvCd")
	List<DmValidValueT> retrieveAvailableValidValuesById(@Param("validValueId") String validValueId, 
			@Param("selectedItemCds") List<String> selectedItemCds );*/
	
	@Query(" FROM FadsLuValuesT f  WHERE f.id.fieldId = :luValueId ORDER BY f.id.luValue")
	List<FadsLuValuesT> retrieveLuValuesById(@Param("luValueId") String luValueId );
	
	@Query("FROM PrmMbMasterT p WHERE p.mbBpFlag = 1 AND p.mbBpType like :baId ORDER BY p.mbCustDatadesc")
	List<PrmMbMasterT> retrieveBpTypeDataElements(@Param("baId") String baId);
	
	@Query("FROM PrmMbMasterT p WHERE p.mbBpFlag = 1 AND p.mbBpType like :mbBpTypeLk ORDER BY p.mbCustDatadesc")
	List<PrmMbMasterT> retrieveDateElements(@Param("mbBpTypeLk") String mbBpTypeLk);
	
}
:29:13.211+05:30 ERROR 2464 --- [datarules] [  restartedMain] o.s.b.d.LoggingFailureAnalysisReporter   : 

***************************
APPLICATION FAILED TO START
***************************

Description:

Field dataRuleMBRepository in com.optum.fads.pgp.datarules.service.impl.DataElementDataService required a bean of type 'com.optum.fads.pgp.datarules.repo.DataRuleMBRepository' that could not be found.

The injection point has the following annotations:
	- @org.springframework.beans.factory.annotation.Autowired(required=true)


Action:

Consider defining a bean of type 'com.optum.fads.pgp.datarules.repo.DataRuleMBRepository' in your configuration.
