git checkout feature
git log --graph --oneline --all
Look for a merge commit like:

sql
Copy
Edit
*   abc1234 Merge branch 'dev' into 'feature'
|\  
| * def5678 Some dev commit
|/
*   ...
Copy the commit hash of the dev tip before it was merged (e.g., def5678), and the commit just before the merge happened in feature.

Step 2: Create a new branch from the commit before the merge
Let’s assume:

base_commit is the commit before the merge

dev_tip_commit is the last commit from dev before the merge

Now create a new branch from base_commit and cherry-pick only the dev commits.

bash
Copy
Edit
git checkout -b dev-only <base_commit>
git cherry-pick <dev_tip_commit>
If there are multiple commits from dev, cherry-pick them one by one or as a range:

bash
Copy
Edit
git cherry-pick <start_commit_hash>^..<end_commit_hash>
✅ Alternative: Use git diff to isolate dev changes
If you're not sure about the exact commits:

bash
Copy
Edit
# Create a new branch from an earlier safe point
git checkout -b dev-only <base_commit>

# Get the diff between base commit and merge commit
git diff <base_commit>..<merge_commit> > dev-changes.patch

# Apply only the dev changes
git apply dev-changes.patch
Then commit:

bash
Copy
Edit
git commit -am "Recovered changes from deleted dev branch"
✅ Summary
Use git log --graph to trace where dev was merged into feature.

Cherry-pick or apply diffs to extract only dev changes.

Create a new clean branch from the commit before the merge.

If you want help analyzing specific commits or logs, feel free to share the output of:

bash
Copy
Edit
git log --graph --oneline --decorate --all
