
import React, {useEffect, useState} from "react";
import { QueryClient, QueryClientProvider } from "react-query";
import { CreateStudy } from "./CreateStudy/CreateStudy";
import styled from "styled-components";
import { GenericGrid } from "../../common/grid/pgp-grid/GenericGrid";
import { urlConfig } from "../../../../../utils/urlConfig";
import { store } from "@optum-osgp-temp/osgp-ui-state-management-lib";
import { PGP_EXPORT_COLUMN_HEADINGS, PGP_USER_ACCESS } from "../../constants";
import { useFetchUserDetailsQuery } from "../../casetracking/Api/UseQueryHooks";
import { PGP_USER_ROLE } from "../../common/AppConstants";

import { Study_Library } from "../../../../../constants/AppConstants";

const queryClient = new QueryClient({
    defaultOptions: {
        queries: {
            refetchOnWindowFocus: false,
        },
    }
});

const Wrapper = styled.div`
`;

export default function StudiesLibraryGrid(props: any) {
  const pgpUserAccess = store.get(PGP_USER_ROLE);
  const userData = store.get("userDetailData");

  const [studyTobeUpdate, setStudyTobeUpdate] = useState(null);
  const [showCreatePage, setShowCreatePage] = useState(false);

  const FADS_BASE_URL = process.env.FADS_GATEWAY_URL;
  const baseURL = FADS_BASE_URL + urlConfig.studyLibraryBaseURL;
  const myEndPoint = FADS_BASE_URL + urlConfig.myStudyLibraryEndPoint;
  useFetchUserDetailsQuery();


  const DataTransformCallBack = () => {
    return React.useCallback(
        (data) => ({
            rows: data.content
                .map((ele: any, ind: number) => ({ ...ele, id: ele.studyId })),
            pageInfo: { totalRowCount: data.totalElements }
        }),
        []
    );
}

  const columns = [
    { field: "studyName", headerName: 'Study Name', flex: 2.5, minWidth: 250 },
    { field: "createdUser", headerName: 'Created By', flex: 1.1, minWidth: 110 },
    { field: "createDate", headerName: 'Created Date', flex: 1, minWidth: 100, filterable: false },
    { field: "updatedUser", headerName: 'Updated By', flex: 1.1, minWidth: 110 },
    { field: "updateDate", headerName: 'Updated Date', flex: 1, minWidth: 100, filterable: false },
    { field: "lastRunDate", headerName: 'Last Run Date', flex: 1, minWidth: 100, filterable: false }
]

  let initConfig = {
    header: Study_Library,
    description: "A Study is a collection of Library items, Time Periods, Exception Processing options, and Activity Limits that create a focused review.",
    url: '',
    columns: columns,
    baseURL: baseURL,
    sort: true,
    labelledBy: "table-caption",
    defaultSortModel: [{ field: 'studyName', sort: 'asc' }],
    deleteRecord: {
      endPoint: FADS_BASE_URL+urlConfig.studyLibraryDeleteRecord,
      recordIdKey: 'studyId',
    },
    scheduleRecord: {
      endPoint: FADS_BASE_URL+'study/study/',
      scheduleEndPoint: FADS_BASE_URL+urlConfig.studyLibraryScheduleRecord,
      recordIdKey: 'studyId',
      title: "Schedule Run Date",
    },
    excelExport: {
      columnNames: ['studyName', 'createdUser', 'createDate', 'updatedUser', 'updateDate'],
      columnHeadings: PGP_EXPORT_COLUMN_HEADINGS,
      endPoint: FADS_BASE_URL+urlConfig.studyLibraryExcel,
      myItemEndPoint : FADS_BASE_URL + urlConfig.MyStudyLibraryExcel,
      fileNamePrefix: 'Study-List_export',
      responseDataVar: 'content'
    },
	  myEndPoint,
    pageId: "study",
    dataTransformCallBack: DataTransformCallBack,
    enableActionColumn: true,
    rows: [],
    exportModeValue: "server" as "server" | "client",
    createButton: {
      buttonName: "Create New Study",
      onClick: () => {
        setShowCreatePage(true)
      },
      disabled: pgpUserAccess === PGP_USER_ACCESS.READ_ONLY,
    },
    editRecord: {
      onClick: (row: any)=>{
          setStudyTobeUpdate(row);
          setShowCreatePage(true)
      },
      disabled: pgpUserAccess === PGP_USER_ACCESS.READ_ONLY,
    },
  };

  useEffect(() => {
		const navMenu = document.querySelector('.secondary-nav-menu .uitk-tabbed-panel-header');
		const tabbedPanel = document.getElementById('studies-table-div')?.parentNode?.parentNode;
		if(!navMenu || !tabbedPanel){ return; }
		if(showCreatePage){
			// @ts-ignore
			navMenu.style.display = 'none';
			// @ts-ignore
			tabbedPanel.style.background = '#FBF9F4';
		}else{
			// @ts-ignore
			navMenu.style.display = 'block';
			// @ts-ignore
			tabbedPanel.style.background = 'unset';
		}
	}, [showCreatePage]);

  return (
    <>
         <Wrapper id='studies-table-div' className={showCreatePage ? "" : "margin-top-minus-45px"}>
                {showCreatePage ? 
                  <CreateStudy 
                    onClose={() => {
                      setShowCreatePage(false);
                      setStudyTobeUpdate(null);
                    }}
                    userData={userData}
                    pgpUserAccess={pgpUserAccess}
                    study={studyTobeUpdate}
                    header={"Create Study"}
                  /> :
                    <QueryClientProvider client={queryClient}>
                        <GenericGrid {...initConfig} />
                    </QueryClientProvider>}

            </Wrapper>
    </>
  );
}
